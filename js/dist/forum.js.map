{"version":3,"file":"forum.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,IAAMA,eAAe,GAAG;AACtBC,EAAAA,OAAO,EADe;AAEtBC,EAAAA,WAAW,EAAE;AAFS,CAAxB;AAQA;;;;;;IAKA;AAgBES,sBAAAA;AAfS,oBAAqB;AAC5BR,MAAAA,UAAU,EADkB;AAE5BC,MAAAA,IAAI,EAFwB;AAG5BC,MAAAA,UAAU,EAHkB;AAI5BC,MAAAA,KAAK,EAJuB;AAK5BC,MAAAA,MAAM,EALsB;AAM5BC,MAAAA,QAAQ,EANoB;AAO5BC,MAAAA,OAAO,EAAEC,wEAAAA;AAPmB,KAArB;AAUT,2BAAgC;AAC9BT,MAAAA,OAAO,EADuB;AAE9BC,MAAAA,WAAW,EAAE;AAFiB,KAAhC;AAME;AACD;;;;SAEDU,wBAAAA,iCAAqB;AACnB,0CACEC,yFADF,EAEEA,uFAFF;AAID;;SAEDC,cAAAA,qBAAW,KAAXA,EAAW,QAAXA,EAAW;AACT,QAAIN,QAAQ,CAARA,MAAAA,KAAJ,GAA2B;AACzB,aAAO,KAAP;AACD;;AACD,QAAIO,KAAK,GAAT,GAAe;AACb;AACD;;AACD,QAAMC,aAAa,GAAGH,4FAAtB;AACA,QAAMI,YAAY,GAAG,qBAArB,QAAqB,CAArB;AACA,QAAIC,QAAQ,GAAG,oCAAoCV,QAAQ,CAARA,MAAAA,KAAnD,CAAe,CAAf;;AACA,QAAIU,QAAQ,KAARA,IAAAA,IAAqBA,QAAQ,KAAjC,WAAiD;AAC/CA,MAAAA,QAAQ,CAARA,WAAAA,CAAAA,OAAAA,CAAAA,aAAAA;;AACA,UAAIA,QAAQ,CAARA,OAAAA,IAAJ,MAA8B;AAC5BA,QAAAA,QAAQ,CAARA,OAAAA,GAAAA,EAAAA;AACD;AAJH,WAKO;AACLA,MAAAA,QAAQ,GAAG;AACTjB,QAAAA,OAAO,EADE;AAETC,QAAAA,WAAW,EAAE;AAFJ,OAAXgB;AAID;;AACD;AACD;;SAEDC,kBAAAA,yBAAe,QAAfA,EAAe;AACb,QAAIF,YAAY,GAAGT,QAAQ,CAA3B,CAA2B,CAA3B;AACA,QAAMY,cAAc,GAAGZ,QAAQ,CAARA,KAAAA,CAAvB,CAAuBA,CAAvB;AACAY,IAAAA,cAAc,CAAdA,OAAAA,CAAwBC,UAAAA,KAAD;AACrB,UAAIA,KAAK,CAALA,KAAAA,CAAAA,MAAAA,GAAqBJ,YAAY,CAAZA,KAAAA,CAAzB,QAAoD;AAClDA,QAAAA,YAAY,GAAZA,KAAAA;AACD;AAHHG,KAAAA;AAKA;AACD;;SAEDE,mBAAAA,0BAAgB,KAAhBA,EAAgB,WAAhBA,EAAgB;AACd,QAAI,cAAcD,KAAK,CAAvB,OAAI,CAAJ,EAAkC;AAChC,aAAO,cAAcA,KAAK,CAAnB,gBAAP,WAAO,CAAP;AACD;;AACD,QACER,gEAAAA,CAAiBQ,KAAK,CAAtBR,OAAAA,KACA,cAAcA,gEAAAA,CAAiBQ,KAAK,CAFtC,OAEgBR,CAFhB,EAGE;AACA,aAAOA,gEAAAA,CAAiBQ,KAAK,CAAtBR,OAAAA,EAAAA,QAAAA,CAAAA,KAAAA,EAAP,WAAOA,CAAP;AACD;;AACD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IC5EH;AAAA;AACW,oBAAqB;AAC5BT,MAAAA,IAAI,EADwB;AAE5BC,MAAAA,UAAU,EAFkB;AAG5BC,MAAAA,KAAK,EAHuB;AAI5B;AACAC,MAAAA,MAAM,EALsB;AAM5BC,MAAAA,QAAQ,EANoB;AAO5BC,MAAAA,OAAO,EAAEC,wEAAAA;AAPmB,KAArB;AAiDV;;;;SAvCCW,QAAAA,eAAK,QAALA,EAAK;AAAA;;AACH,QAAME,OAAO,GAAb;AAEA,QAAMC,QAAQ,GAAd;AACA,QAAMC,QAAQ,aACTC,MAAM,CAANA,IAAAA,CAAY,KADA,QACZA,CADS,EAETA,MAAM,CAANA,IAAAA,CAAYb,gEAAZa,CAFS,CAAd;AAIAD,IAAAA,QAAQ,CAARA,OAAAA,CAAkBE,UAAAA,GAAD;AACf,UAAI,CAAC,eAAD,GAAC,CAAD,IAAuB,CAACd,gEAAAA,CAA5B,GAA4BA,CAA5B,EAAmD;AACjD;AACD;;AACD,UAAMe,OAAO,GAAG,sBACZ,eADY,GACZ,CADY,GAEZf,gEAAAA,CAAAA,GAAAA,EAFJ;AAGA,UAAMgB,WAAW,GAAG,IAApB,OAAoB,EAApB;AACA,UAAMC,MAAM,GAAG,WAAW,CAAX,MAAkB;AAC/BC,QAAAA,QAD+B,EAC/BA,QAD+B;AAE/BC,QAAAA,SAAS,EAAE;AAFoB,OAAlB,CAAf;;AAKA,UAAIF,MAAM,YAAV,SAA+B;AAC7BA,QAAAA,MAAM,CAANA,IAAAA,CAAaG,UAAAA,QAAD;AACVC,UAAAA,sDAAM,UAANA,QAAM,CAANA;AADFJ,SAAAA;AAGAN,QAAAA,QAAQ,CAARA,IAAAA,CAAAA,MAAAA;AAJF,aAKO;AACLU,QAAAA,sDAAM,UAANA,MAAM,CAANA;AACD;AApBHT,KAAAA;;AAsBA,QAAID,QAAQ,CAARA,MAAAA,GAAJ,GAAyB;AACvB,aAAO,YAAaW,UAAAA,OAAD;AACjBC,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,EAAAA,IAAAA,CAA2B;AACzBD,UAAAA,OAAO,CAACE,sDAAM,CAAdF,OAAc,CAAP,CAAPA;AADFC,SAAAA;AADF,OAAO,CAAP;AAKD;;AACD,WAAOC,sDAAM,CAAb,OAAa,CAAb;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;ICvDH;AAiBE1B,qBAAAA;AAhBA;AAEA;AAEA,sBAAgC;AAC9B2B,MAAAA,UAAU,EAAE;AADkB,KAAhC;AAIA;AAEA;AAEA;AAEA;AAGE;AACD;;;;SAEDC,aAAAA,oBAAWC,OAAXD,EAAU;AAAA,QAACC,OAAD;AAACA,MAAAA,OAAD;AAAA;;AACR,QAAIA,OAAO,CAAX,WAAuB;AACrB,uBAAiBA,OAAO,CAAxB;AACD;;AAED,QAAIA,OAAO,CAAX,YAAwB;AACtB,wBAAkBA,OAAO,CAAzB;AAEA;AACD;;AAED,QAAIA,OAAO,CAAX,cAA0B;AACxB,2BAAqBA,OAAO,CAA5B;AACD;;AAED,QAAIA,OAAO,CAAX,QAAoB;AAClB,oBAAcA,OAAO,CAArB;AACD;AACF;;SAEDC,kBAAAA,yBAAe,YAAfA,EAAe;AACb,QAAI,6BAAJ,YAAI,CAAJ,EAAgD;AAC9C;AADF,WAEO;AACL,YAAM,UAAN,8CAAM,CAAN;AACD;AACF;;SAEDC,0BAAAA,iCAAuB,YAAvBA,EAAuB;AACrB,QAAIC,KAAK,GAAT;AACAjB,IAAAA,MAAM,CAANA,IAAAA,CAAAA,oEAAAA,EAAAA,OAAAA,CAAsCkB,UAAAA,IAAD;AACnC,UAAIA,IAAI,IAAR,cAA0B;AACxB,YAAMC,eAAe,GAArB;AACAnB,QAAAA,MAAM,CAANA,IAAAA,CAAYoB,oEAAe,CAA3BpB,eAA2B,CAA3BA,EAAAA,OAAAA,CAAuDC,UAAAA,GAAD;AACpD,cAAI,EAAEA,GAAG,IAAIoB,YAAY,CAAzB,eAAyB,CAArB,CAAJ,EAA6C;AAC3CJ,YAAAA,KAAK,GAALA,KAAAA;AACD;AAHHjB,SAAAA;AAFF,aAOO;AACLiB,QAAAA,KAAK,GAALA,KAAAA;AACD;AAVHjB,KAAAA;AAYA;AACD;;SAEDsB,wBAAAA,iCAAqB;AAAA;;AACnB,QAAMC,kBAAkB,GAAxB;AACAvB,IAAAA,MAAM,CAANA,IAAAA,CAAY,KAAZA,UAAAA,EAAAA,OAAAA,CAAsCwB,UAAAA,IAAD;AACnCD,MAAAA,kBAAkB,CAAlBA,IAAkB,CAAlBA,GAA2B,0BAA3BA,IAA2B,CAA3BA;AADFvB,KAAAA;AAGA;AACD;;SAEDyB,sBAAAA,6BAAmB,IAAnBA,EAAmB;AACjB,QAAMC,IAAI,GAAG,gBAAb,IAAa,CAAb;;AACA,QAAIF,IAAI,KAAR,cAA2B;AACzB,UAAMG,eAAe,GAArB;AAEAD,MAAAA,IAAI,CAAJA,OAAAA,CAAcE,UAAAA,KAAD;AACX,YAAMC,SAAS,GAAG,OAAlB;;AACA,YACEA,SAAS,KAATA,QAAAA,IACAA,SAAS,KADTA,QAAAA,IAEAA,SAAS,KAHX,WAIE;AACAF,UAAAA,eAAe,CAAfA,IAAAA,CAAqBC,KAAK,CAALA,QAAAA,GAArBD,WAAqBC,EAArBD;AACD;AARHD,OAAAA;AAWA,aAAOI,qEAAqB,CAA5B,eAA4B,CAA5B;AACD;;AACD,WAAOA,qEAAqB,CAA5B,IAA4B,CAA5B;AACD;;SAEDC,6BAAAA,oCAA0B,UAA1BA,EAA0B;AACxB,QAAI,gBAAJ,YAAgC;AAC9B,6CACK,gBADwB,UAA7B;AADF,WAKO;AACL;AACD;;AAED,yCAAqC,yBAArC,YAAqC,CAArC;AACD;;SAEMC,aAAAA,oBAAU,IAAVA,EAAU,OAAVA,EAAU;AACf,QAAI,cAAJ,IAAI,CAAJ,EAAyB;AACvBC,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,wBAAAA;AADF,WAEO;AACL;AACD;AACF;;;;;AAGH,gBAAe,IAAf,OAAe,EAAf;;;;;;;;;;;;;;;;;;AChIA,IAAMC,MAAM,GAAZ;AACA,IAAMC,MAAM,GAAGD,MAAM,GAArB;AACA,IAAME,IAAI,GAAGD,MAAM,GAAnB;AACA,IAAME,GAAG,GAAGD,IAAI,GAAhB;AACA,IAAME,KAAK,GAAGD,GAAG,GAAjB;AACA,IAAME,IAAI,GAAGD,KAAK,GAAlB;AACA,IAAME,OAAO,GAAGD,IAAI,GAApB;AAEA,IAAME,KAAK,GAAG;AACZC,EAAAA,MAAM,EADM;AAEZC,EAAAA,MAAM,EAFM;AAGZC,EAAAA,IAAI,EAHQ;AAIZC,EAAAA,GAAG,EAJS;AAKZC,EAAAA,KAAK,EALO;AAMZC,EAAAA,IAAI,EANQ;AAOZC,EAAAA,OAAO,EAAER;AAPG,CAAd;AAUA;;;;;;IAKA;;;;;SACES,YAAAA,mBAAS,UAATA,EAAS,KAATA,EAAS;AACP,QAAIhD,GAAG,GAAP;;AACA,QAAIiD,KAAK,KAALA,SAAAA,IAAuBA,KAAK,KAAhC,GAAwC;AACtCjD,MAAAA,GAAG,IAAHA,GAAAA;AACD;;AACD,QAAQkD,cAAR,GAA2BhE,mFAA3B;AACA,WAAOgE,cAAc,CAAdA,GAAc,CAAdA,CAAAA,OAAAA,CAAAA,QAAAA,OAAP,KAAOA,CAAP;AAID;;SAEDC,sBAAAA,6BAAmB,OAAnBA,EAAmB;AAAA;;AACjB,QAAMC,iBAAiB,GAAsB;AAC3CC,MAAAA,0BAA0B,EAAEC,OAAO,IAAI,MADI,IACR,CADQ;AAE3CC,MAAAA,6BAA6B,EAAED,OAAO,GAFK;AAG3CE,MAAAA,8BAA8B,EAAEF,OAAO,GAHI;AAI3CG,MAAAA,+BAA+B,EAAEH,OAAO,GAAG;AAJA,KAA7C;AAMA,QAAMI,iBAAiB,GAAsB;AAC3CL,MAAAA,0BAA0B,EADiB;AAE3CE,MAAAA,6BAA6B,EAFc;AAG3CC,MAAAA,8BAA8B,EAHa;AAI3CC,MAAAA,+BAA+B,EAAE;AAJU,KAA7C;AAMA1D,IAAAA,MAAM,CAANA,IAAAA,CAAAA,iBAAAA,EAAAA,OAAAA,CAAwC4D,UAAAA,QAAD;AACrC,UAAMC,OAAO,GAAGR,iBAAiB,CAAjC,QAAiC,CAAjC;AACAM,MAAAA,iBAAiB,CAAjBA,QAAiB,CAAjBA,GACE,kBADFA,OACE,CADFA;AAFF3D,KAAAA;AAKA,WAAO;AACLqD,MAAAA,iBADK,EACLA,iBADK;AAELM,MAAAA,iBAFK,EAELA,iBAFK;AAGLtE,MAAAA,KAAK,EAAE;AAHF,KAAP;AAKD;;SAEDyE,iBAAAA,wBAAc,OAAdA,EAAc;AACZ,QAAMC,KAAK,GAAX;;AACA,QAAIR,OAAO,GAAG,MAAd,OAA2B;AACzB;AACA;AACD;;AACD,QAAIA,OAAO,GAAG,MAAd,OAA2B;AACzB;AACA;AACD;;AACD,QAAIA,OAAO,GAAG,MAAd,OAA2B;AACzB;AACA;AACD;;AACD,QAAIA,OAAO,GAAG,OAAd,OAA4B;AAC1B;AACA;AACA;AACD,KAlBW,CAkBX;;;AAED;AACD;;SAEDS,cAAAA,qBAAW,OAAXA,EAAW;AACT,QAAIC,UAAU,GAAd;AACA;AACA,QAAMC,QAAQ,GAAGlE,MAAM,CAANA,IAAAA,CAAjB,KAAiBA,CAAjB;AACA,QAAMmE,UAAU,GAAGD,QAAQ,CAARA,SAAAA,CAChBE,UAAAA,IAAD;AAAA,aAAUP,OAAO,GAAGpB,KAAK,CAD3B,IAC2B,CAAzB;AAAA,KADiByB,CAAnB;;AAGA,QAAIC,UAAU,GAAG,CAAjB,GAAqB;AACnBF,MAAAA,UAAU,GAAGC,QAAQ,CAACC,UAAU,GAAhCF,CAAqB,CAArBA;;AACA,UAAIE,UAAU,KAAd,GAAsB;AACpBE,QAAAA,IAAI,GAAGC,IAAI,CAAJA,KAAAA,CAAWT,OAAO,GAAGpB,KAAK,CAAjC4B,UAAiC,CAA1BC,CAAPD;AADF,aAEO;AACLJ,QAAAA,UAAU,GAAVA,UAAAA;AACD;AACF;;AACD,WAAO,2BAAP,IAAO,CAAP;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICrGUM,aAAa,GAAG;IAChBC,aAAa,GAAG;IAChBC,WAAW,GAAGC;IACdC,sBAAsB,GAAG;IACzBC,mCAAmC,GAAG;IACtCC,gCAAgC,GAAG;IACnCC,+BAA+B,GAAG;IAClCC,cAAc,GAAG;;IAEjBC,WAAW,GAAG;IACdC,SAAS,GAAG;;IAEZC,SAAS,GAAG;IACZC,kBAAkB,GAAG;IACrBC,SAAS,GAAG;IACZC,kBAAkB,GAAG;IACrBC,SAAS,GAAG;IACZC,SAAS,GAAG;IACZC,cAAc,GAAG;IACjBC,SAAS,GAAG;IACZC,cAAc,GAAG;IACjBC,OAAO,GAAG;AAAEC,EAAAA,UAAU,EAAE;AAAd;;;;;;;;;;;;;;;;ACvBvB,iBAAe;AACb,KAAG,CACD,IADC,CACD,CADC,EAED,IAHW,CAGX,CAFC,CADU;AAKb,KAAG,CACD,IADC,CACD,CADC,EAED,IAPW,CAOX,CAFC,CALU;AASb,KAAG,CACD,IADC,CACD,CADC,EAED,IAFC,CAED,CAFC,EAGD,IAZW,CAYX,CAHC,CATU;AAcb,KAAG,CACD,IADC,CACD,CADC,EAED,IAFC,CAED,CAFC,EAGD,IAHC,CAGD,CAHC,EAID,IAlBW,CAkBX,CAJC,CAdU;AAoBb,KAAG,CACD,IADC,CACD,CADC,EAED,IAFC,CAED,CAFC;AApBU,CAAf;;;;;;;;;;;;;;;;ACAA,gBAAe;AACbC,EAAAA,CAAC,EAAE,MADU,GACV,CADU;AAEbC,EAAAA,CAAC,EAAE,CAFU,GAEV,CAFU;AAGbC,EAAAA,CAAC,EAAE,gBAHU,GAGV,CAHU;AAIbC,EAAAA,CAAC,EAAE,CAJU,GAIV,CAJU;AAKbC,EAAAA,CAAC,EAAE,MALU,GAKV,CALU;AAMbC,EAAAA,CAAC,EAAE,WANU,GAMV,CANU;AAObC,EAAAA,CAAC,EAAE,WAPU,GAOV,CAPU;AAQbC,EAAAA,CAAC,EAAE,CARU,GAQV,CARU;AASbC,EAAAA,CAAC,EAAE,MATU,GASV,CATU;AAUbC,EAAAA,CAAC,EAAE,MAVU,GAUV,CAVU;AAWbC,EAAAA,CAAC,EAAE,CAXU,GAWV,CAXU;AAYbC,EAAAA,CAAC,EAAE;AAZU,CAAf;;;;;;;;;;;;;;;;ACAA,sBAAe;AACbC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EADH;AAERC,IAAAA,UAAU,EAFF;AAGRC,IAAAA,YAAY,EAHJ;AAIRC,IAAAA,cAAc,EAJN;AAKRC,IAAAA,SAAS,EALD;AAMRC,IAAAA,WAAW,EANH;AAORC,IAAAA,KAAK,EAPG;AAQRC,IAAAA,MAAM,EARE;AASRC,IAAAA,UAAU,EATF;AAURC,IAAAA,MAAM,EAVE;AAWRC,IAAAA,eAAe,EAXP;AAYRC,IAAAA,YAAY,EAZJ;AAaRC,IAAAA,iBAAiB,EAbT;AAcRC,IAAAA,WAAW,EAdH;AAeR3G,IAAAA,UAAU,EAAE;AAfJ,GADG;AAkBbpC,EAAAA,WAAW,EAAE;AACXgJ,IAAAA,IAAI,EADO;AAEXC,IAAAA,YAAY,EAFD;AAGXC,IAAAA,YAAY,EAHD;AAIXC,IAAAA,cAAc,EAJH;AAKXX,IAAAA,KAAK,EALM;AAMXD,IAAAA,WAAW,EANA;AAOXa,IAAAA,eAAe,EAPJ;AAQXd,IAAAA,SAAS,EARE;AASXe,IAAAA,QAAQ,EATG;AAUXC,IAAAA,qBAAqB,EAVV;AAWXC,IAAAA,WAAW,EAXA;AAYXC,IAAAA,QAAQ,EAZG;AAaXC,IAAAA,MAAM,EAAE;AAbG,GAlBA;AAiCb9E,EAAAA,cAAc,EAAE;AACd+E,IAAAA,QAAQ,EADM;AAEdxF,IAAAA,MAAM,EAFQ;AAGdmB,IAAAA,OAAO,EAHO;AAIdlB,IAAAA,MAAM,EAJQ;AAKdwF,IAAAA,OAAO,EALO;AAMdvF,IAAAA,IAAI,EANU;AAOdwF,IAAAA,KAAK,EAPS;AAQdvF,IAAAA,GAAG,EARW;AASdwF,IAAAA,IAAI,EATU;AAUdvF,IAAAA,KAAK,EAVS;AAWdwF,IAAAA,MAAM,EAXQ;AAYdvF,IAAAA,IAAI,EAZU;AAadwF,IAAAA,KAAK,EAbS;AAcdC,IAAAA,SAAS,EAAE;AAdG;AAjCH,CAAf;;;;;;;;;;;;;;;;;;;;ICEaC,KAAK,GAAIC,SAATD,KAASC,CAAAA,GAAD;AAAA,SAAsB1I,MAAM,CAANA,IAAAA,CAAAA,GAAAA,EAAAA,MAAAA,KAA4B,CAAlD;AAAA;;IAERQ,MAAM,GAAG,SAATA,MAAS;AAAA;AAEpBmI,IAAAA,YAAY,CAAZA,IAAAA,CAAAA,KAAAA,CAAAA,YAAAA,EAAAA,IAAAA;AAFoB;AAAA;;IAIT1F,SAAS,GAAG,SAAZA,SAAY;AACvB,MAAM2F,SAAS,GAAGC,MAAM,CAANA,KAAAA,CAAlB,EAAkBA,CAAlB;AACA,SAAOD,SAAS,CAATA,GAAAA,CAAeE,UAAAA,KAAD;AAAA,WAAUC,MAAM,CAANA,KAAM,CAANA,IAAxBH,KAAc;AAAA,GAAdA,EAAAA,IAAAA,CAAP,EAAOA,CAAP;AACD;;;IAMYjI,MAAM,GAAId,SAAVc,MAAUd,CAAAA,OAAD;AAAA,SACpBA,OAAO,CAAPA,IAAAA,CAAa;AAAA,WAAYmJ,EAAE,CAAFA,CAAAA,GAAOC,EAAE,CAATD,CAAAA,IAAeA,EAAE,CAAFA,CAAAA,GAAOC,EAAE,CAAjDpJ,CAAa;AAAA,GAAbA,CADoB;AAAA;;IAGTiC,qBAAqB,GAAIoH,SAAzBpH,qBAAyBoH,CAAAA,WAAD;AACnC,MAAM9I,MAAM,GAAZ;AACA,MAAI+I,OAAO,GAAX,EAFmC,CAEnC;;AACAD,EAAAA,WAAW,CAAXA,OAAAA,CAAqBE,UAAAA,IAAD;AAClBhJ,IAAAA,MAAM,CAANA,IAAM,CAANA,GAAAA,OAAAA;AACA+I,IAAAA,OAAO,IAAPA,CAAAA;AAFFD,GAAAA;AAIA;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBD,IAAM9E,IAAI,GAAG,SAAPA,IAAO;AAAA,SAAM,WAAnB,OAAmB,EAAN;AAAA,CAAb;;AAEA,IAAMiF,iBAAiB,GAAG,SAApBA,iBAAoB;AAKxB,MAAM7J,QAAQ,GAAG,IAAjB,wDAAiB,EAAjB;AACA,MAAM8J,aAAa,GAAG,IAAtB,6DAAsB,EAAtB;AACA,MAAMC,aAAa,GAAGC,wFAAAA,CAAAA,QAAAA,EAAtB,eAAsBA,CAAtB;AAIA,MAAMC,QAAQ,GAAGrF,IAAI,KAArB;AACA,MAAMsF,WAAW,GAAGJ,aAAa,CAAbA,mBAAAA,CAAkCC,aAAa,CAAnE,OAAoBD,CAApB;AAEA;AACEG,IAAAA,QADK,EACLA;AADF,KAAO,aAAP,EAAO,WAAP;AAIEjK,IAAAA,QAAQ,EAAEA,QAAQ,CAARA,WAAAA,CACRkK,WAAW,CADHlK,KAAAA,EAER+J,aAAa,CAFL/J,QAAAA;AAJZ;AAdF;;IAyBamK,MAAM,GAAG,SAATA,MAAS;AACpB,kBAAgB;AACdxK,IAAAA,kFAAAA,CAAAA,UAAAA;AACD;;AAED,MAAMyK,QAAQ,GAAG,IAAjB,wDAAiB,EAAjB;AAEA,MAAMC,KAAK,GAAGzF,IAAd;AAEA,MAAMvE,OAAO,GAAG+J,QAAQ,CAARA,KAAAA,CAAhB,QAAgBA,CAAhB;;AAEA,MAAI/J,OAAO,YAAX,SAAgC;AAC9B,WAAO,OAAO,CAAP,KAAciK,UAAAA,eAAD;AAClB,aAAOT,iBAAiB,4BAAxB,KAAwB,CAAxB;AADF,KAAO,CAAP;AAGD;;AACD,SAAOA,iBAAiB,oBAAxB,KAAwB,CAAxB;AACD;;;;;;;;;;;;;;;;;ACnDD,wBAAe,SAAf,iBAAe;AACb;AADF;;;;;;;;;;;;;;;;;;;;ACOA,wBAAe,SAAf,iBAAe;AAAA,MAAGU,KAAH,QAAGA,KAAH;AACb,MAAIxG,OAAO,YAAGoB,sEAAH,EAA6BoF,KAAK,CAA7C,MAAW,CAAX;;AACA,MAAIxG,OAAO,KAAKyG,MAAM,CAAtB,mBAA0C;AACxCzG,IAAAA,OAAO,GAAGyG,MAAM,CAAhBzG,SAAAA;AACD;;AACD,iBALa,CAKb;AAEA;;AACA,MAAIwG,KAAK,CAALA,MAAAA,KAAJ,GAAwB;AACtBE,IAAAA,UAAU,GAAGpF,gFAAgC,GAA7CoF,CAAAA;AADF,SAEO;AACLA,IAAAA,UAAU,GAAGnF,+EAA+B,GAA5CmF,CAAAA;AACD;;AAED,SAAO3F,IAAI,CAAJA,GAAAA,CAAAA,OAAAA,EAAP,UAAOA,CAAP;AAdF;;;;;;;;;;;;;;;;;;;;ACLA,kBAAe,SAAf,WAAe;AACb,SAAO;AACL/F,IAAAA,OAAO,EAAEY,mFADJ;AAELX,IAAAA,WAAW,EAAE,CAACW,sFAAD;AAFR,GAAP;AADF;;;;;;;;;;;;;;;;;;;;;ACWA;;;;;;IAKA;;;;;AACE;;;;;;;;;;;;;;;;;;;;SAoBAQ,QAAAA,qBAAK;AAAA,QAAGU,QAAH,QAAGA,QAAH;AACH,QAAMR,OAAO,aACR,gCADwB,QACxB,CADQ,EAER,6BAFL,QAEK,CAFQ,CAAb;AAKA,QAAMqK,eAAe,GAAG,iBAAxB,OAAwB,CAAxB;AACA,WAAOvJ,sDAAM,CAAb,eAAa,CAAb;AACD;;SAEDwJ,0BAAAA,iCAAuB,QAAvBA,EAAuB;AACrB,QAAMtK,OAAO,GAAb;AACA,QAAMuK,sBAAsB,GAA5B,8CAFqB,CAErB;;AAEA,SAAK,IAAIlE,CAAC,GAAV,GAAgBA,CAAC,IAAI5B,IAAI,CAAJA,GAAAA,CAASjE,QAAQ,CAARA,MAAAA,GAA9B,CAAqBiE,CAArB,EAAoD4B,CAAC,IAArD,GAA4D;AAC1D,WAAK,IAAImE,CAAC,GAAGnE,CAAC,GAAd,GAAoBmE,CAAC,IAAInE,CAAC,GAA1B,GAAgCmE,CAAC,IAAjC,GAAwC;AACtC,YAAIA,CAAC,IAAIhK,QAAQ,CAAjB,QAA0B;AACxB;AACD;;AACD,YAAM0J,KAAK,GAAG1J,QAAQ,CAARA,KAAAA,CAAAA,CAAAA,EAAkB,UAAhC,GAAcA,CAAd;AACA,YAAMiK,UAAU,GAAGF,sBAAsB,CAAtBA,IAAAA,CAAnB,KAAmBA,CAAnB;;AACA,YAAIE,UAAU,IAAd,MAAwB;AACtB,cAAMC,GAAG,GAAG,+BAA+B,CACzCC,QAAQ,CAACF,UAAU,CAAX,CAAW,CAAX,EADiC,EACjC,CADiC,EAEzCE,QAAQ,CAACF,UAAU,CAAX,CAAW,CAAX,EAFiC,EAEjC,CAFiC,EAGzCE,QAAQ,CAACF,UAAU,CAAX,CAAW,CAAX,EAHV,EAGU,CAHiC,CAA/B,CAAZ;;AAKA,cAAIC,GAAG,IAAP,MAAiB;AACf1K,YAAAA,OAAO,CAAPA,IAAAA,CAAa;AACX4K,cAAAA,OAAO,EADI;AAEXV,cAAAA,KAFW,EAEXA,KAFW;AAGX7D,cAAAA,CAHW,EAGXA,CAHW;AAIXmE,cAAAA,CAJW,EAIXA,CAJW;AAKXK,cAAAA,SAAS,EAAEJ,UAAU,CALV,CAKU,CALV;AAMXvH,cAAAA,IAAI,EAAEwH,GAAG,CANE;AAOXzH,cAAAA,KAAK,EAAEyH,GAAG,CAPC;AAQX1H,cAAAA,GAAG,EAAE0H,GAAG,CAAC1H;AARE,aAAbhD;AAUD;AACF;AACF;AACF;;AACD;AACD;;;SAGD8K,6BAAAA,oCAA0B,QAA1BA,EAA0B;AAAA;;AACxB,QAAM9K,OAAO,GAAb;AACA,QAAM+K,oBAAoB,GAA1B;;AACA,QAAMC,MAAM,GAAIC,SAAVD,MAAUC,CAAAA,SAAD;AAAA,aACbxG,IAAI,CAAJA,GAAAA,CAASwG,SAAS,CAATA,IAAAA,GADX,8DACExG,CADa;AAAA,KAAf,CAHwB,CAGxB;;;AAGA,SAAK,IAAI4B,CAAC,GAAV,GAAgBA,CAAC,IAAI5B,IAAI,CAAJA,GAAAA,CAASjE,QAAQ,CAARA,MAAAA,GAA9B,CAAqBiE,CAArB,EAAoD4B,CAAC,IAArD,GAA4D;AAAA,iCACjDmE,CADiD;AAExD,YAAIA,CAAC,IAAIhK,QAAQ,CAAjB,QAA0B;AACxB;AACD;;AACD,YAAM0J,KAAK,GAAG1J,QAAQ,CAARA,KAAAA,CAAAA,CAAAA,EAAkB,UAAhC,GAAcA,CAAd;;AACA,YAAIuK,oBAAoB,CAApBA,IAAAA,CAAJ,KAAIA,CAAJ,EAAsC;AACpC,cAAMG,UAAU,GAAhB;AACA,cAAMC,KAAK,GAAGjB,KAAK,CAAnB;AACA,cAAMkB,aAAa,GAAGxG,2DAAW,CAAjC,KAAiC,CAAjC;AACAwG,UAAAA,aAAa,CAAbA,OAAAA,CAAsB;AAAA,gBAAC,CAAD;AAAA;;AACpB,gBAAMV,GAAG,GAAG,gCAA+B,CACzCC,QAAQ,CAACT,KAAK,CAALA,KAAAA,CAAAA,CAAAA,EAAD,CAACA,CAAD,EADiC,EACjC,CADiC,EAEzCS,QAAQ,CAACT,KAAK,CAALA,KAAAA,CAAAA,CAAAA,EAAD,CAACA,CAAD,EAFiC,EAEjC,CAFiC,EAGzCS,QAAQ,CAACT,KAAK,CAALA,KAAAA,CAAD,CAACA,CAAD,EAHV,EAGU,CAHiC,CAA/B,CAAZ;;AAKA,gBAAIQ,GAAG,IAAP,MAAiB;AACfQ,cAAAA,UAAU,CAAVA,IAAAA,CAAAA,GAAAA;AACD;AARHE,WAAAA;;AAUA,cAAIF,UAAU,CAAVA,MAAAA,GAAJ,GAA2B;AACzB;;;;;;;;;AASA,gBAAIG,aAAa,GAAGH,UAAU,CAA9B,CAA8B,CAA9B;AACA,gBAAII,WAAW,GAAGN,MAAM,CAACE,UAAU,CAAnC,CAAmC,CAAX,CAAxB;AACAA,YAAAA,UAAU,CAAVA,KAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAA6BD,UAAAA,SAAD;AAC1B,kBAAMM,QAAQ,GAAGP,MAAM,CAAvB,SAAuB,CAAvB;;AACA,kBAAIO,QAAQ,GAAZ,aAA4B;AAC1BF,gBAAAA,aAAa,GAAbA,SAAAA;AACAC,gBAAAA,WAAW,GAAXA,QAAAA;AACD;AALHJ,aAAAA;AAOAlL,YAAAA,OAAO,CAAPA,IAAAA,CAAa;AACX4K,cAAAA,OAAO,EADI;AAEXV,cAAAA,KAFW,EAEXA,KAFW;AAGX7D,cAAAA,CAHW,EAGXA,CAHW;AAIXmE,cAAAA,CAJW,EAIXA,CAJW;AAKXK,cAAAA,SAAS,EALE;AAMX3H,cAAAA,IAAI,EAAEmI,aAAa,CANR;AAOXpI,cAAAA,KAAK,EAAEoI,aAAa,CAPT;AAQXrI,cAAAA,GAAG,EAAEqI,aAAa,CAACrI;AARR,aAAbhD;AAUD;AACF;AAlDuD;;AAC1D,WAAK,IAAIwK,CAAC,GAAGnE,CAAC,GAAd,GAAoBmE,CAAC,IAAInE,CAAC,GAA1B,GAAgCmE,CAAC,IAAjC,GAAwC;AAAA,yBAA/BA,CAA+B;;AAAA,8BAEpC;AAgDH;AACF;;AACD;AACD;AAED;;;;;;;;;;;SASAgB,cAAAA,qBAAW,OAAXA,EAAW;AACT,WAAO,OAAO,CAAP,OAAgB1L,UAAAA,KAAD;AACpB,UAAI2L,UAAU,GAAd;AACA,UAAMC,aAAa,GAAG1L,OAAO,CAA7B;;AACA,WAAK,IAAIuG,CAAC,GAAV,GAAgBA,CAAC,GAAjB,eAAmCA,CAAC,IAApC,GAA2C;AACzC,YAAMoF,UAAU,GAAG3L,OAAO,CAA1B,CAA0B,CAA1B;;AACA,YAAIF,KAAK,KAAT,YAA0B;AACxB,cAAI6L,UAAU,CAAVA,CAAAA,IAAgB7L,KAAK,CAArB6L,CAAAA,IAA2BA,UAAU,CAAVA,CAAAA,IAAgB7L,KAAK,CAApD,GAAwD;AACtD2L,YAAAA,UAAU,GAAVA,IAAAA;AACA;AACD;AACF;AACF;;AACD,aAAO,CAAP;AAZF,KAAO,CAAP;AAcD;AAED;;;;;;;;;;AAUA;;;SACAG,4BAAAA,mCAAyB,QAAzBA,EAAyB;AACvB,QAAIC,QAAQ,CAARA,CAAQ,CAARA,GAAAA,EAAAA,IAAoBA,QAAQ,CAARA,CAAQ,CAARA,IAAxB,GAA0C;AACxC;AACD;;AACD,QAAIC,MAAM,GAAV;AACA,QAAIC,MAAM,GAAV;AACA,QAAIC,MAAM,GAAV;;AACA,SAAK,IAAIzF,CAAC,GAAL,GAAW0F,IAAI,GAAGJ,QAAQ,CAA/B,QAAwCtF,CAAC,GAAzC,MAAkDA,CAAC,IAAnD,GAA0D;AACxD,UAAM2F,IAAG,GAAGL,QAAQ,CAApB,CAAoB,CAApB;;AACA,UAAKK,IAAG,GAAHA,EAAAA,IAAYA,IAAG,GAAhB,6DAACA,IAAoCA,IAAG,GAA5C,+DAA8D;AAC5D;AACD;;AACD,UAAIA,IAAG,GAAP,IAAc;AACZH,QAAAA,MAAM,IAANA,CAAAA;AACD;;AACD,UAAIG,IAAG,GAAP,IAAc;AACZJ,QAAAA,MAAM,IAANA,CAAAA;AACD;;AACD,UAAII,IAAG,IAAP,GAAc;AACZF,QAAAA,MAAM,IAANA,CAAAA;AACD;AACF;;AACD,QAAID,MAAM,IAANA,CAAAA,IAAeD,MAAM,KAArBC,CAAAA,IAA+BC,MAAM,IAAzC,GAAgD;AAC9C;AACD;;AACD,WAAO,iBAAP,QAAO,CAAP;AACD;;;SAGDG,cAAAA,qBAAW,QAAXA,EAAW;AACT;AACA,QAAMC,kBAAkB,GAAyB,CAC/C,CAACP,QAAQ,CAAT,CAAS,CAAT,EAAcA,QAAQ,CAARA,KAAAA,CAAAA,CAAAA,EADiC,CACjCA,CAAd,CAD+C,EAE/C,CAACA,QAAQ,CAAT,CAAS,CAAT,EAAcA,QAAQ,CAARA,KAAAA,CAAAA,CAAAA,EAFiC,CAEjCA,CAAd,CAF+C;AAAA,KAAjD;AAIA,QAAMQ,wBAAwB,GAAGD,kBAAkB,CAAnD;;AACA,SAAK,IAAI5B,CAAC,GAAV,GAAgBA,CAAC,GAAjB,0BAA8CA,CAAC,IAA/C,GAAsD;AACpD,kCAAkB4B,kBAAkB,CAApC,CAAoC,CAApC;AAAA,UAAM,CAAN;AAAA,UAAM,IAAN;;AACA,UAAIzH,6DAAa,IAAbA,CAAAA,IAAsB2H,CAAC,IAA3B,+DAA8C;AAC5C,YAAMC,EAAE,GAAG,2BAAX,IAAW,CAAX;;AACA,YAAIA,EAAE,IAAN,MAAgB;AACd,iBAAO;AACLrJ,YAAAA,IAAI,EADC;AAELD,YAAAA,KAAK,EAAEsJ,EAAE,CAFJ;AAGLvJ,YAAAA,GAAG,EAAEuJ,EAAE,CAACvJ;AAHH,WAAP;AAKD;AACD;;;;;;;AAKA;AACD;AACF,KAzBQ,CAyBR;AAED;;;AACA,SAAK,IAAIwJ,CAAC,GAAV,GAAgBA,CAAC,GAAjB,0BAA8CA,CAAC,IAA/C,GAAsD;AACpD,kCAAkBJ,kBAAkB,CAApC,CAAoC,CAApC;AAAA,UAAM,EAAN;AAAA,UAAM,KAAN;;AACA,UAAMG,GAAE,GAAG,2BAAX,KAAW,CAAX;;AACA,UAAIA,GAAE,IAAN,MAAgB;AACd,eAAO;AACLrJ,UAAAA,IAAI,EAAE,wBADD,EACC,CADD;AAELD,UAAAA,KAAK,EAAEsJ,GAAE,CAFJ;AAGLvJ,UAAAA,GAAG,EAAEuJ,GAAE,CAACvJ;AAHH,SAAP;AAKD;AACF;;AACD;AACD;;SAEDyJ,wBAAAA,+BAAqB,QAArBA,EAAqB;AACnB,QAAMC,IAAI,GAAG,WAAWb,QAAQ,CAARA,KAAAA,GAAxB,OAAwBA,EAAX,CAAb;;AACA,SAAK,IAAIxF,CAAC,GAAV,GAAgBA,CAAC,GAAGqG,IAAI,CAAxB,QAAiCrG,CAAC,IAAlC,GAAyC;AACvC,UAAMsG,IAAI,GAAGD,IAAI,CAAjB,CAAiB,CAAjB;AACA,UAAM1J,GAAG,GAAG2J,IAAI,CAAhB,CAAgB,CAAhB;AACA,UAAM1J,KAAK,GAAG0J,IAAI,CAAlB,CAAkB,CAAlB;;AACA,UAAI3J,GAAG,IAAHA,CAAAA,IAAYA,GAAG,IAAfA,EAAAA,IAAyBC,KAAK,IAA9BD,CAAAA,IAAuCC,KAAK,IAAhD,IAAwD;AACtD,eAAO;AACLD,UAAAA,GADK,EACLA,GADK;AAELC,UAAAA,KAAAA,EAAAA;AAFK,SAAP;AAID;AACF;;AACD;AACD;;SAED2J,qBAAAA,4BAAkB,IAAlBA,EAAkB;AAChB,QAAI1J,IAAI,GAAR,IAAe;AACb;AACD;;AACD,QAAIA,IAAI,GAAR,IAAe;AACb;AACA,aAAOA,IAAI,GAAX;AACD,KAPe,CAOf;;;AAED,WAAOA,IAAI,GAAX;AACD;;;;;;;;;;;;;;;;;;;;;;;ACtRH,kBAAe,SAAf,WAAe;AAAA,MAAC,IAAD,QAAC,IAAD;AAAA,MAAS2H,SAAT,QAASA,SAAT;AACb;AACA,MAAMgC,SAAS,GAAGpI,IAAI,CAAJA,GAAAA,CAASA,IAAI,CAAJA,GAAAA,CAASvB,IAAI,GAAtBuB,8DAASA,CAATA,EAAlB,8DAAkBA,CAAlB;AAEA,MAAIf,OAAO,GAAGmJ,SAAS,GAAvB,IAJa,CAIb;;AAEA,iBAAe;AACbnJ,IAAAA,OAAO,IAAPA,CAAAA;AACD;;AACD;AATF;;;;;;;;;;;;;;;;;;;;;;ACCA,IAAMoJ,4BAA4B,GAAG,SAA/BA,4BAA+B;AAInC,MAAIpO,OAAO,GAAX;;AACA,MAAIqO,WAAW,IAAI,CAACjN,KAAK,CAArBiN,IAAAA,IAA8B,CAACjN,KAAK,CAAxC,UAAmD;AACjD,QAAIA,KAAK,CAALA,IAAAA,IAAJ,IAAsB;AACpBpB,MAAAA,OAAO,GAAGY,oFAAVZ;AADF,WAEO,IAAIoB,KAAK,CAALA,IAAAA,IAAJ,KAAuB;AAC5BpB,MAAAA,OAAO,GAAGY,wFAAVZ;AADK,WAEA;AACLA,MAAAA,OAAO,GAAGY,oFAAVZ;AACD;AAPH,SAQO,IAAIoB,KAAK,CAALA,YAAAA,IAAJ,GAA6B;AAClCpB,IAAAA,OAAO,GAAGY,6FAAVZ;AACD;;AACD;AAhBF;;AAmBA,IAAMsO,6BAA6B,GAAG,SAAhCA,6BAAgC;AAIpC,MAAItO,OAAO,GAAX;;AACA,mBAAiB;AACfA,IAAAA,OAAO,GAAGY,0FAAVZ;AACD;;AACD;AARF;;AAWA,IAAMuO,yBAAyB,GAAG,SAA5BA,yBAA4B;AAIhC,mBAAiB;AACf,WAAO3N,+FAAP;AACD;;AACD,SAAOA,yFAAP;AAPF;;AAUA,IAAM4N,oBAAoB,GAAG,SAAvBA,oBAAuB;AAC3B,MAAIxO,OAAO,GAAX;AACA,MAAMyO,QAAQ,GAAGrN,KAAK,CAAtB;AACA,MAAMsN,OAAO,GACXD,QAAQ,KAARA,WAAAA,IAA4BA,QAAQ,CAARA,WAAAA,GAAAA,QAAAA,CAD9B,YAC8BA,CAD9B;;AAEA,MAAIA,QAAQ,KAAZ,aAA8B;AAC5BzO,IAAAA,OAAO,GAAGoO,4BAA4B,QAAtCpO,WAAsC,CAAtCA;AADF,SAEO,IAAIyO,QAAQ,CAARA,QAAAA,CAAJ,WAAIA,CAAJ,EAAoC;AACzCzO,IAAAA,OAAO,GAAGsO,6BAA6B,QAAvCtO,WAAuC,CAAvCA;AADK,SAEA,aAAa;AAClBA,IAAAA,OAAO,GAAGuO,yBAAyB,QAAnCvO,WAAmC,CAAnCA;AADK,SAEA,IAAIyO,QAAQ,KAAZ,cAA+B;AACpCzO,IAAAA,OAAO,GAAGY,wFAAVZ;AACD;;AACD;AAdF;;AAiBA,wBAAe,SAAf,iBAAe;AACb,MAAMA,OAAO,GAAGwO,oBAAoB,QAApC,WAAoC,CAApC;AACA,MAAMvO,WAAW,GAAjB;AACA,MAAM4K,IAAI,GAAGzJ,KAAK,CAAlB;;AAEA,MAAIyJ,IAAI,CAAJA,KAAAA,CAAJ,2DAAIA,CAAJ,EAA6B;AAC3B5K,IAAAA,WAAW,CAAXA,IAAAA,CAAiBW,+FAAjBX;AADF,SAEO,IAAI4K,IAAI,CAAJA,KAAAA,CAAAA,kEAAAA,KAAkCA,IAAI,CAAJA,WAAAA,OAAtC,MAAmE;AACxE5K,IAAAA,WAAW,CAAXA,IAAAA,CAAiBW,6FAAjBX;AACD;;AACD,MAAImB,KAAK,CAALA,QAAAA,IAAkBA,KAAK,CAALA,KAAAA,CAAAA,MAAAA,IAAtB,GAA+C;AAC7CnB,IAAAA,WAAW,CAAXA,IAAAA,CAAiBW,6FAAjBX;AACD;;AACD,MAAImB,KAAK,CAAT,MAAgB;AACdnB,IAAAA,WAAW,CAAXA,IAAAA,CAAiBW,qFAAjBX;AACD;;AACD,SAAO;AACLD,IAAAA,OADK,EACLA,OADK;AAELC,IAAAA,WAAAA,EAAAA;AAFK,GAAP;AAhBF;;;;;;;;;;;;;;;;;;;;;;;;;;ICnDA;AAKES,6BAAAA;AACE,gBAAY,2EAAS,KAArB,YAAY,CAAZ;AACA,mBAAe,8EAAY,KAA3B,YAAe,CAAf;AACD;;;;SAEDU,QAAAA,qBAAK;AAAA,QAAGU,QAAH,QAAGA,QAAH;AACH,QAAMR,OAAO,aACP,kBAAkB;AAAEQ,MAAAA,QAAAA,EAAAA;AAAF,KAAlB,CADO,EAEP,mBAAmB;AAAEA,MAAAA,QAAAA,EAAAA;AAAF,KAAnB,CAFO,EAGP,gBAAgB;AAAEA,MAAAA,QAAAA,EAAAA;AAAF,KAAhB,CAHO,CAAb;AAKA,WAAOM,sDAAM,CAAb,OAAa,CAAb;AACD;;SAEDuM,eAAAA,6BAAY;AAAA,QAAG7M,QAAH,SAAGA,QAAH;AACV;AACA,QAAMR,OAAO,GAAb;AACA,QAAMsN,cAAc,GAAG9M,QAAQ,CAA/B;AACA,QAAM+M,aAAa,GAAG/M,QAAQ,CAA9B,WAAsBA,EAAtB;AAEAL,IAAAA,MAAM,CAANA,IAAAA,CAAYb,0EAAZa,EAAAA,OAAAA,CAAiDqN,UAAAA,cAAD;AAC9C,UAAMC,UAAU,GACdnO,0EAAAA,CADF,cACEA,CADF;;AAEA,WAAK,IAAI+G,CAAC,GAAV,GAAgBA,CAAC,GAAjB,gBAAoCA,CAAC,IAArC,GAA4C;AAC1C,aAAK,IAAImE,CAAC,GAAV,GAAgBA,CAAC,GAAjB,gBAAoCA,CAAC,IAArC,GAA4C;AAC1C,cAAI+C,aAAa,CAAbA,KAAAA,CAAAA,CAAAA,EAAuB,UAAvBA,GAAAA,KAAJ,YAAyD;AACvD,gBAAMhE,IAAI,GAAGgE,aAAa,CAAbA,KAAAA,CAAAA,CAAAA,EAAuB,UAApC,GAAaA,CAAb;AACA,gBAAMG,IAAI,GAAGD,UAAU,CAAvB,IAAuB,CAAvB;AACAzN,YAAAA,OAAO,CAAPA,IAAAA,CAAa;AACX4K,cAAAA,OAAO,EADI;AAEXvE,cAAAA,CAFW,EAEXA,CAFW;AAGXmE,cAAAA,CAHW,EAGXA,CAHW;AAIXN,cAAAA,KAAK,EAAE1J,QAAQ,CAARA,KAAAA,CAAAA,CAAAA,EAAkB,UAJd,GAIJA,CAJI;AAKXmN,cAAAA,WAAW,EALA;AAMXD,cAAAA,IANW,EAMXA,IANW;AAOXF,cAAAA,cAAc,EAPH;AAQXI,cAAAA,QAAQ,EARG;AASXjG,cAAAA,IAAI,EAAE;AATK,aAAb3H;AAWD;AACF;AACF;AArBHG,KAAAA;AAuBA;AACD;;;;;;;;;;;;;;;;;;;;;;;;;AChDH,wBAAe,SAAf,iBAAe;AAAA,MAAC,IAAD,QAAC,IAAD;AAAA,MAAC,QAAD,QAAC,QAAD;AAAA,MAAC,IAAD,QAAC,IAAD;AAAA,MAAC,GAAD,QAAC,GAAD;AAAA,MAKb+J,KALa,QAKbA,KALa;AAOb,MAAM2D,WAAW,GAAjB,KAPa,CAOb;;AACA,MAAMC,mBAAmB,GAAGC,8EAAgB,CAA5C,KAA4C,CAA5C;AACA,MAAMC,cAAc,GAAGC,yEAAW,CAAC;AAAEtG,IAAAA,IAAF,EAAEA,IAAF;AAAQuG,IAAAA,GAAR,EAAQA,GAAR;AAAahE,IAAAA,KAAAA,EAAAA;AAAb,GAAD,CAAlC;AACA,MAAMiE,kBAAkB,GAAIP,QAAQ,IAAT,CAACA,IAA5B;AACA,MAAMQ,WAAW,GACfP,WAAW,GAAXA,mBAAAA,GAAAA,cAAAA,GADF;AAEA,SAAO;AACLA,IAAAA,WADK,EACLA,WADK;AAELC,IAAAA,mBAFK,EAELA,mBAFK;AAGLE,IAAAA,cAHK,EAGLA,cAHK;AAILI,IAAAA,WAAAA,EAAAA;AAJK,GAAP;AAbF;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;IAKA;AAGEhP,qBAAYiO,YAAZjO,EAAYiO;AACV;AACD;;;;SAEDvN,QAAAA,qBAAK;AAAA;;AAAA,QAAGU,QAAH,QAAGA,QAAH;AACH,QAAMR,OAAO,GAAb;AACA,QAAMqO,cAAc,GAAG,uBACrB,oCAAoC/O,iEAApC,CADqB,CAAvB;;AAFG,+BAKM+G,CALN;AAMD,UAAM6H,GAAG,GAAGG,cAAc,CADuB,CACvB,CAA1B,CANC,CAKgD;;AAGjD,UAAIzF,qDAAK,CAAT,GAAS,CAAT,EAAgB;AACd;AACD;;AACD,UAAM0F,cAAc,GAAGlL,yDAAS,WAAhC,GAAgC,CAAhC;;AACA,UAAMmL,iBAAiB,GAAG,mBAAkB;AAC1C/N,QAAAA,QAAQ,EAAE8N;AADgC,OAAlB,CAA1B;;AAGAC,MAAAA,iBAAiB,CAAjBA,OAAAA,CAA2BzO,UAAAA,KAAD;AACxB,YAAMoK,KAAK,GAAG1J,QAAQ,CAARA,KAAAA,CAAeV,KAAK,CAApBU,CAAAA,EAAwB,CAACV,KAAK,CAAN,SAAtC,GAAcU,CAAd,CADwB,CACxB;;AAEA,YAAI0J,KAAK,CAALA,WAAAA,OAAwBpK,KAAK,CAAjC,aAA+C;AAC7C;AACA,cAAM0O,QAAQ,GAAd;AACArO,UAAAA,MAAM,CAANA,IAAAA,CAAAA,GAAAA,EAAAA,OAAAA,CAA0BsO,UAAAA,SAAD;AACvB,gBAAMC,GAAG,GAAGR,GAAG,CAAf,SAAe,CAAf;;AACA,gBAAIhE,KAAK,CAALA,OAAAA,CAAAA,SAAAA,MAA6B,CAAjC,GAAqC;AACnCsE,cAAAA,QAAQ,CAARA,SAAQ,CAARA,GAAAA,GAAAA;AACD;AAJHrO,WAAAA;AAMA,cAAMwO,UAAU,GAAGxO,MAAM,CAANA,IAAAA,CAAAA,QAAAA,EAAAA,GAAAA,CACXqM,UAAAA,CAAD;AAAA,mBAAUA,CAAV,YAAkBgC,QAAQ,CADdrO,CACc,CAA1B;AAAA,WADYA,EAAAA,IAAAA,CAAnB,IAAmBA,CAAnB;AAGAH,UAAAA,OAAO,CAAPA,IAAAA,CAAAA,8EAAAA,KAAa,KAAbA;AAEE2H,YAAAA,IAAI,EAFO,IAAb3H;AAGEkK,YAAAA,KAHW,EAGXA,KAHFlK;AAIEkO,YAAAA,GAAG,EAJQ,QAAblO;AAKE2O,YAAAA,UAAAA,EAAAA;AALF3O;AAOD;AAtBHuO,OAAAA;AAfC;;AAKH,SAAK,IAAIlI,CAAC,GAAV,GAAgBA,CAAC,GAAGgI,cAAc,CAAlC,QAA2ChI,CAAC,IAA5C,GAAmD;AAAA,uBAA1CA,CAA0C;;AAAA,4BAI/C;AA8BH,KAvCE,CAuCF;AAED;AACA;;;AACA,WAAOrG,OAAO,CAAPA,MAAAA,CAAgBF,UAAAA,KAAD;AAAA,aAAWA,KAAK,CAALA,KAAAA,CAAAA,MAAAA,GAAjC,CAAsB;AAAA,KAAfE,CAAP;AACD;;;SAGD4O,uBAAAA,8BAAoB,QAApBA,EAAoB,KAApBA,EAAoB;AAClB,QAAMC,aAAa,GAAnB;AACA,QAAMC,QAAQ,GAAd;AACAtO,IAAAA,QAAQ,CAARA,KAAAA,CAAAA,EAAAA,EAAAA,OAAAA,CAA4ByI,UAAAA,KAAD;AACzB4F,MAAAA,aAAa,CAAbA,KAAa,CAAbA,GAAAA,IAAAA;AADFrO,KAAAA;AAIAL,IAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,EAAAA,OAAAA,CAA4B4O,UAAAA,MAAD;AACzB,UAAMC,IAAI,GAAGC,KAAK,CAAlB,MAAkB,CAAlB;AACA,UAAMC,YAAY,GAAGF,IAAI,CAAJA,MAAAA,CAAad,UAAAA,GAAD;AAAA,eAAiBA,GAAG,IAArD,aAAiC;AAAA,OAAZc,CAArB;;AACA,UAAIE,YAAY,CAAZA,MAAAA,GAAJ,GAA6B;AAC3BJ,QAAAA,QAAQ,CAARA,MAAQ,CAARA,GAAAA,YAAAA;AACD;AALH3O,KAAAA;AAOA;AACD;;;SAGDgP,oBAAAA,2BAAiB,KAAjBA,EAAiB;AACf,QAAMC,SAAS,GAAGjP,MAAM,CAANA,IAAAA,CAAlB,KAAkBA,CAAlB;AACA,QAAM6O,IAAI,GAAG,wBAAwB,CAAxB,EAAwB,CAAxB,EAAb,KAAa,CAAb,CAFe,CAEf;;AAEA,WAAO,IAAI,CAAJ,IAAUd,UAAAA,GAAD;AACd,UAAMmB,OAAO,GAAb;AACAnB,MAAAA,GAAG,CAAHA,OAAAA,CAAY;AAAA,YAAC,OAAD;AAAA;AACVmB,QAAAA,OAAO,CAAPA,OAAO,CAAPA,GAAAA,GAAAA;AADFnB,OAAAA;AAGA;AALF,KAAO,CAAP;AAOD;;SAEDoB,UAAAA,iBAAO,IAAPA,EAAO,IAAPA,EAAO,KAAPA,EAAO;AACL,QAAI,CAACC,IAAI,CAAT,QAAkB;AAChB;AACD;;AACD,QAAMC,QAAQ,GAAGD,IAAI,CAArB,CAAqB,CAArB;AACA,QAAME,QAAQ,GAAGF,IAAI,CAAJA,KAAAA,CAAjB,CAAiBA,CAAjB;AACA,QAAMG,QAAQ,GAAd;AACAT,IAAAA,KAAK,CAALA,QAAK,CAALA,CAAAA,OAAAA,CAA+CU,UAAAA,OAAD;AAC5CX,MAAAA,IAAI,CAAJA,OAAAA,CAAcd,UAAAA,GAAD;AACX,YAAI0B,YAAY,GAAG,CAAnB;;AACA,aAAK,IAAIvJ,CAAC,GAAV,GAAgBA,CAAC,GAAG6H,GAAG,CAAvB,QAAgC7H,CAAC,IAAjC,GAAwC;AACtC,cAAI6H,GAAG,CAAHA,CAAG,CAAHA,CAAAA,CAAAA,MAAJ,SAA2B;AACzB0B,YAAAA,YAAY,GAAZA,CAAAA;AACA;AACD;AACF;;AACD,YAAIA,YAAY,KAAK,CAArB,GAAyB;AACvB,cAAMC,YAAY,GAAG3B,GAAG,CAAHA,MAAAA,CAAW,CAAC,UAAjC,QAAiC,CAAD,CAAXA,CAArB;AACAwB,UAAAA,QAAQ,CAARA,IAAAA,CAAAA,YAAAA;AAFF,eAGO;AACL,cAAMI,cAAc,GAAG5B,GAAG,CAAHA,KAAAA,CAAvB,CAAuBA,CAAvB;AACA4B,UAAAA,cAAc,CAAdA,MAAAA,CAAAA,YAAAA,EAAAA,CAAAA;AACAA,UAAAA,cAAc,CAAdA,IAAAA,CAAoB,UAApBA,QAAoB,CAApBA;AACAJ,UAAAA,QAAQ,CAARA,IAAAA,CAAAA,GAAAA;AACAA,UAAAA,QAAQ,CAARA,IAAAA,CAAAA,cAAAA;AACD;AAjBHV,OAAAA;AADFC,KAAAA;AAqBA,QAAMc,OAAO,GAAG,WAAhB,QAAgB,CAAhB;;AACA,QAAIN,QAAQ,CAAZ,QAAqB;AACnB,aAAO,gCAAP,KAAO,CAAP;AACD;;AACD;AACD;;SAEDO,QAAAA,eAAK,IAALA,EAAK;AACH,QAAMC,OAAO,GAAb;AACA,QAAMC,OAAO,GAAb;AACAlB,IAAAA,IAAI,CAAJA,OAAAA,CAAcd,UAAAA,GAAD;AACX,UAAMiC,KAAK,GAAGjC,GAAG,CAAHA,GAAAA,CAAQ;AAAA,eAAc,IAApC,KAAoC,CAAd;AAAA,OAARA,CAAd;AACAiC,MAAAA,KAAK,CAALA,IAAAA;AACA,UAAMC,KAAK,GAAGD,KAAK,CAALA,GAAAA,CAAU;AAAA,YAAC,CAAD;AAAA;AAAA,eAAe3D,CAAf,SAAV2D,CAAU;AAAA,OAAVA,EAAAA,IAAAA,CAAd,GAAcA,CAAd;;AACA,UAAI,EAAEC,KAAK,IAAX,OAAI,CAAJ,EAAyB;AACvBF,QAAAA,OAAO,CAAPA,KAAO,CAAPA,GAAAA,IAAAA;AACAD,QAAAA,OAAO,CAAPA,IAAAA,CAAAA,GAAAA;AACD;AAPHjB,KAAAA;AASA;AACD;;;;;;;;;;;;;;;;;;;;;;;ACnJH;;;;;IAKA;AAGE5P,qBAAYiO,YAAZjO,EAAYiO;AACV;AACD;;;;SAEDvN,QAAAA,qBAAK;AAAA,QAAGU,QAAH,QAAGA,QAAH;AACH,QAAM6P,gBAAgB,GAAG7P,QAAQ,CAARA,KAAAA,CAAAA,EAAAA,EAAAA,OAAAA,GAAAA,IAAAA,CAAzB,EAAyBA,CAAzB;AACA,WAAO,kBAAkB;AACvBA,MAAAA,QAAQ,EAAE6P;AADa,KAAlB,MAECvQ,UAAAA,KAAD;AAAA,gGAA6B,KAA7B;AAELoK,QAAAA,KAAK,EAAEpK,KAAK,CAALA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,EAAAA,OAAAA,GAAAA,IAAAA,CAF2B,EAE3BA,CAFF;AAGL8N,QAAAA,QAAQ,EAH0B,IAA7B;AAIL;AACAvH,QAAAA,CAAC,EAAE7F,QAAQ,CAARA,MAAAA,GAAAA,CAAAA,GAAsBV,KAAK,CALI,CAA7B;AAML0K,QAAAA,CAAC,EAAEhK,QAAQ,CAARA,MAAAA,GAAAA,CAAAA,GAAsBV,KAAK,CAACuG;AAN1B;AAAA,KAFA,CAAP;AAUD;;;;;;;;;;;;;;;;;;;;;;;ACXH,IAAMiK,SAAS,GAAG,SAAZA,SAAY;AAAA,MAAC,IAAD,QAAC,IAAD;AAAA,MAAC,MAAD,QAAC,MAAD;AAAA,MAAiBpG,KAAjB,QAAiBA,KAAjB;AAChB,MAAMqG,QAAQ,GAAGvB,IAAI,CAArB,MAAqB,CAArB,CADgB,CAChB;;AAEA,MAAMwB,IAAI,GAAGtG,KAAK,CAALA,WAAAA,GAAAA,KAAAA,CAAb,EAAaA,CAAb,CAHgB,CAGhB;;AAEA,MAAMuG,WAAW,GAAGD,IAAI,CAAJA,MAAAA,CAAavH,UAAAA,KAAD;AAAA,WAAUA,KAAI,KAA1BuH,MAAY;AAAA,GAAZA,EAApB,OALgB,CAKhB;;AAEA,MAAME,aAAa,GAAGF,IAAI,CAAJA,MAAAA,CAAavH,UAAAA,MAAD;AAAA,WAAUA,MAAI,KAA1BuH,QAAY;AAAA,GAAZA,EAAtB;AACA,SAAO;AACLC,IAAAA,WADK,EACLA,WADK;AAELC,IAAAA,aAAAA,EAAAA;AAFK,GAAP;AARF;;AAcA,kBAAe,SAAf,WAAe;AAAA,MAAC,IAAD,SAAC,IAAD;AAAA,MAAC,GAAD,SAAC,GAAD;AAAA,MAAcxG,KAAd,SAAcA,KAAd;;AACb,MAAI,CAAJ,MAAW;AACT;AACD;;AACD,MAAIyG,UAAU,GAAd;AACA,MAAM3B,IAAI,GAAV;AACA7O,EAAAA,MAAM,CAANA,IAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CAA2ByQ,UAAAA,MAAD;AACxB,qBAAuCN,SAAS,CAAC;AAAEtB,MAAAA,IAAF,EAAEA,IAAF;AAAQ4B,MAAAA,MAAR,EAAQA,MAAR;AAAgB1G,MAAAA,KAAAA,EAAAA;AAAhB,KAAD,CAAhD;AAAA,QAAM,WAAN,cAAM,WAAN;AAAA,QAAqBwG,aAArB,cAAqBA,aAArB;;AAEA,QAAID,WAAW,KAAXA,CAAAA,IAAqBC,aAAa,KAAtC,GAA8C;AAC5C;AACA;AACA;AACAC,MAAAA,UAAU,IAAVA,CAAAA;AAJF,WAKO;AACL;AACA;AACA,UAAME,CAAC,GAAGpM,IAAI,CAAJA,GAAAA,CAAAA,aAAAA,EAAV,WAAUA,CAAV;AACA,UAAIqM,aAAa,GAAjB;;AACA,WAAK,IAAIzK,CAAC,GAAV,GAAgBA,CAAC,IAAjB,GAAwBA,CAAC,IAAzB,GAAgC;AAC9ByK,QAAAA,aAAa,IAAIC,iEAAAA,CAAUL,aAAa,GAAvBK,WAAAA,EAAjBD,CAAiBC,CAAjBD;AACD;;AACDH,MAAAA,UAAU,IAAVA,aAAAA;AACD;AAjBHxQ,GAAAA;AAmBA;AAzBF;;;;;;;;;;;;;;;;;;;;;;AClBA,IAAM6Q,aAAa,GAAIC,SAAjBD,aAAiBC,CAAAA,WAAD;AACpB,MAAMC,SAAS,GAAGD,WAAW,CAAXA,KAAAA,CAAlB,EAAkBA,CAAlB;AACA,MAAME,cAAc,GAAGD,SAAS,CAATA,MAAAA,CAAkBjI,UAAAA,KAAD;AAAA,WACtCA,KAAI,CAAJA,KAAAA,CADqBiI,yDACrBjI,CADsC;AAAA,GAAjBiI,EAAvB;AAGA,MAAME,cAAc,GAAGF,SAAS,CAATA,MAAAA,CAAkBjI,UAAAA,MAAD;AAAA,WACtCA,MAAI,CAAJA,KAAAA,CADqBiI,yDACrBjI,CADsC;AAAA,GAAjBiI,EAAvB;AAIA,MAAIP,UAAU,GAAd;AACA,MAAMU,eAAe,GAAG5M,IAAI,CAAJA,GAAAA,CAAAA,cAAAA,EAAxB,cAAwBA,CAAxB;;AACA,OAAK,IAAI4B,CAAC,GAAV,GAAgBA,CAAC,IAAjB,iBAAsCA,CAAC,IAAvC,GAA8C;AAC5CsK,IAAAA,UAAU,IAAII,iEAAAA,CAAUI,cAAc,GAAxBJ,cAAAA,EAAdJ,CAAcI,CAAdJ;AACD;;AACD;AAdF;;AAiBA,uBAAgBpH,SAAhB,gBAAgBA,CAAAA,IAAD;AACb;AACA,MAAM0H,WAAW,GAAG1H,IAAI,CAAJA,OAAAA,CAAAA,8DAAAA,EAApB,EAAoBA,CAApB;;AACA,MACE0H,WAAW,CAAXA,KAAAA,CAAAA,kEAAAA,KACAA,WAAW,CAAXA,WAAAA,OAFF,aAGE;AACA;AACD,GARY,CAQZ;AAED;AACA;;;AACA,MAAMK,WAAW,GAAG,yHAApB,kEAAoB,CAApB;AACA,MAAMC,iBAAiB,GAAGD,WAAW,CAArC;;AACA,OAAK,IAAIjL,CAAC,GAAV,GAAgBA,CAAC,GAAjB,mBAAuCA,CAAC,IAAxC,GAA+C;AAC7C,QAAMtH,KAAK,GAAGuS,WAAW,CAAzB,CAAyB,CAAzB;;AACA,QAAIL,WAAW,CAAXA,KAAAA,CAAJ,KAAIA,CAAJ,EAA8B;AAC5B;AACD;AACF,GAnBY,CAmBZ;AAGD;AACA;;;AACA,SAAOD,aAAa,CAApB,WAAoB,CAApB;AAxBF;;;;;;;;;;;;;;;;;;;;ACzBA,mBAAgBlR,SAAhB,YAAgBA,CAAAA,KAAD;AACb,MAAIA,KAAK,CAALA,SAAAA,KAAJ,cAAsC;AACpC,WAAO;AACLpB,MAAAA,OAAO,EAAEY,yFADJ;AAELX,MAAAA,WAAW,EAAE,CACXW,4FADW,EAEXA,gGAFW;AAFR,KAAP;AAOD;;AACD,SAAO;AACLZ,IAAAA,OAAO,EADF;AAELC,IAAAA,WAAW,EAAE;AAFR,GAAP;AAVF;;;;;;;;;;;;;;;;;;;;;ACOA;;;;;;IAKA;;;;;SACEmB,QAAAA,qBAAK;AAAA,QAAC,QAAD,QAAC,QAAD;AAAA,4BAAa0R,OAAb;AAAA,QAAaA,OAAb,6BAAuB1L,uDAAvB;AACH,QAAM9F,OAAO,GAAb;AACAG,IAAAA,MAAM,CAANA,IAAAA,CAAAA,OAAAA,EAAAA,OAAAA,CAA8BwB,UAAAA,IAAD;AAC3B,UAAM5C,KAAK,GAAGyS,OAAO,CAArB,IAAqB,CAArB;AACAzS,MAAAA,KAAK,CAALA,SAAAA,GAAAA,CAAAA,CAF2B,CAE3BA;;AACA,UAAM0L,UAAU,GAAG1L,KAAK,CAALA,IAAAA,CAAnB,QAAmBA,CAAnB;;AACA,sBAAgB;AACd,YAAMmL,KAAK,GAAGO,UAAU,CAAxB,CAAwB,CAAxB;AACAzK,QAAAA,OAAO,CAAPA,IAAAA,CAAa;AACX4K,UAAAA,OAAO,EADI;AAEXV,UAAAA,KAFW,EAEXA,KAFW;AAGX7D,UAAAA,CAAC,EAAEoE,UAAU,CAHF;AAIXD,UAAAA,CAAC,EAAEC,UAAU,CAAVA,KAAAA,GAAmBA,UAAU,CAAVA,CAAU,CAAVA,CAAnBA,MAAAA,GAJQ;AAKXgH,UAAAA,SAAS,EALE;AAMXhH,UAAAA,UAAAA,EAAAA;AANW,SAAbzK;AAQD;AAdHG,KAAAA;AAgBA,WAAOW,sDAAM,CAAb,OAAa,CAAb;AACD;;;;;;;;;;;;;;;;;;;;;;;AChCH,mBAAe,SAAf,YAAe;AAAA,MAAC,SAAD,QAAC,SAAD;AAAA,MAAC,UAAD,QAAC,UAAD;AAAA,MAGboJ,KAHa,QAGbA,KAHa;AAKb,MAAMwH,cAAc,GAAG;AACrBC,IAAAA,UAAU,EADW;AAErBC,IAAAA,UAAU,EAFW;AAGrBC,IAAAA,KAAK,EAHgB;AAIrBC,IAAAA,YAAY,EAJS;AAKrBC,IAAAA,MAAM,EALe;AAMrBC,IAAAA,OAAO,EAAE;AANY,GAAvB;;AAQA,MAAIP,SAAS,IAAb,gBAAiC;AAC/B,oBACEC,cAAc,CAAdA,SAAc,CADhB,EAC8DxH,KAAK,CADnE;AAGD,GAjBY,CAiBZ;AAED;;;AACA;AACE;AACE;AACA;AACA,aAAOzF,IAAI,CAAJA,GAAAA,CACLA,IAAI,CAAJA,GAAAA,CAASkG,QAAQ,CAACF,UAAU,CAAX,CAAW,CAAX,EAARE,EAAQ,CAARA,GADJlG,8DACLA,CADKA,EAAP,8DAAOA,CAAP;AAJJ;;AASA;AA7BF;;;;;;;;;;;;;;;;;;;;ACAA,oBAAgB3E,SAAhB,aAAgBA,CAAAA,KAAD;AACb,MAAIpB,OAAO,GAAGY,4FAAd;;AACA,MAAIQ,KAAK,CAALA,SAAAA,CAAAA,MAAAA,KAAJ,GAAkC;AAChCpB,IAAAA,OAAO,GAAGY,0FAAVZ;AACD;;AAED,SAAO;AACLA,IAAAA,OADK,EACLA,OADK;AAELC,IAAAA,WAAW,EAAE,CAACW,yFAAD;AAFR,GAAP;AANF;;;;;;;;;;;;;;;;;;;;;ACKA;;;;;;IAKA;;;;;AACE;SACAQ,QAAAA,qBAAK;AAAA,QAAC,QAAD,QAAC,QAAD;AAAA,QAAaW,SAAb,QAAaA,SAAb;AACH,QAAMT,OAAO,GAAb;AACA,QAAIiS,SAAS,GAAb;;AACA,WAAOA,SAAS,GAAGzR,QAAQ,CAA3B,QAAoC;AAClC,UAAM0R,WAAW,GAAG,8BAApB,SAAoB,CAApB;AACA,UAAMC,SAAS,GAAG,4BAAlB,SAAkB,CAAlB;;AACA,UAAID,WAAW,IAAf,MAAyB;AACvB;AACD;;AACD,gCAA6B,gCAA7B,SAA6B,CAA7B;AAAA,UAAM,KAAN,uBAAM,KAAN;AAAA,UAAeE,SAAf,uBAAeA,SAAf;;AAEA,iBAAW;AACT,YAAM5H,CAAC,GAAG1K,KAAK,CAALA,KAAAA,GAAcA,KAAK,CAALA,CAAK,CAALA,CAAdA,MAAAA,GAAV;AACA,YAAM+N,WAAW,GAAG,+BAApB,SAAoB,CAApB;AACA7N,QAAAA,OAAO,CAAPA,IAAAA,CAAa,yCAAbA,WAAa,CAAbA;AAEAiS,QAAAA,SAAS,GAAGzH,CAAC,GAAbyH,CAAAA;AACD;AACF;;AAED,QAAMI,WAAW,GAAG,OAAO,CAAP,KAAcvS,UAAAA,KAAD;AAC/B,aAAOA,KAAK,YAAZ;AADF,KAAoB,CAApB;;AAGA,qBAAiB;AACf,aAAOe,OAAO,CAAPA,GAAAA,CAAP,OAAOA,CAAP;AACD;;AACD;AACD;;;SAGDyR,iBAAAA,wBAAc,SAAdA,EAAc,CAAdA,EAAc,KAAdA,EAAc,WAAdA,EAAc;AAMZ,QAAMC,SAAS,GAAgB;AAC7B3H,MAAAA,OAAO,EADsB;AAE7BvE,MAAAA,CAAC,EAAEvG,KAAK,CAFqB;AAG7B0K,MAAAA,CAH6B,EAG7BA,CAH6B;AAI7BN,MAAAA,KAAK,EAAEpK,KAAK,CAJiB,CAIjB,CAJiB;AAK7BsS,MAAAA,SAL6B,EAK7BA,SAL6B;AAM7BvE,MAAAA,WAAW,EANkB;AAO7B2E,MAAAA,WAAW,EAAE1S,KAAK,CAALA,CAAK,CAALA,CAAAA,MAAAA,GAAkBsS,SAAS,CAACK;AAPZ,KAA/B;;AASA,QAAI5E,WAAW,YAAf,SAAoC;AAClC,aAAO,WAAW,CAAX,KAAkB6E,UAAAA,mBAAD;AACtB,kGAAO,SAAP;AAEE7E,UAAAA,WAAW,EAAE6E;AAFf;AADF,OAAO,CAAP;AAMD;;AACD,8FAAO,SAAP;AAEE7E,MAAAA,WAAAA,EAAAA;AAFF;AAID;;SAED8E,iBAAAA,wBAAc,QAAdA,EAAc,SAAdA,EAAc;AACZ,QAAMC,MAAM,GAAZ;AACAA,IAAAA,MAAM,CAANA,SAAAA,GAAAA,SAAAA;AACA,WAAOA,MAAM,CAANA,IAAAA,CAAP,QAAOA,CAAP;AACD;;SAEDC,eAAAA,sBAAY,QAAZA,EAAY,SAAZA,EAAY;AACV,QAAMC,IAAI,GAAV;AACAA,IAAAA,IAAI,CAAJA,SAAAA,GAAAA,SAAAA;AACA,WAAOA,IAAI,CAAJA,IAAAA,CAAP,QAAOA,CAAP;AACD;;SAEDC,gBAAAA,uBAAa,WAAbA,EAAa,SAAbA,EAAa;AAIX,QAAMC,YAAY,GAAlB;AACA;AACA,QAAIZ,SAAS,GAAb;;AACA,QAAID,SAAS,IAAID,WAAW,CAAXA,CAAW,CAAXA,CAAAA,MAAAA,GAAwBC,SAAS,CAATA,CAAS,CAATA,CAAzC,QAA8D;AAC5D;AACA;AACA;AACArS,MAAAA,KAAK,GAJuD,WAI5DA,CAJ4D;AAM5D;AACA;AACA;;AACA,UAAM4M,IAAI,GAAGsG,YAAY,CAAZA,IAAAA,CAAkBlT,KAAK,CAApC,CAAoC,CAAvBkT,CAAb;;AACA,gBAAU;AACRZ,QAAAA,SAAS,GAAG1F,IAAI,CAAhB0F,CAAgB,CAAhBA;AACD;AAZH,WAaO;AACL;AACA;AACA;AACAtS,MAAAA,KAAK,GAALA,SAAAA;;AACA,iBAAW;AACTsS,QAAAA,SAAS,GAAGtS,KAAK,CAAjBsS,CAAiB,CAAjBA;AACD;AACF;;AACD,WAAO;AACLtS,MAAAA,KADK,EACLA,KADK;AAELsS,MAAAA,SAAAA,EAAAA;AAFK,KAAP;AAID;;SAEDa,iBAAAA,wBAAc,SAAdA,EAAc,SAAdA,EAAc;AACZ,QAAMjT,OAAO,GAAGS,SAAS,CAATA,KAAAA,CAAhB,SAAgBA,CAAhB;;AACA,QAAIT,OAAO,YAAX,SAAgC;AAC9B,aAAO,OAAO,CAAP,KAAciK,UAAAA,eAAD;AAClB,YAAMiJ,YAAY,GAAGvJ,wFAAAA,CAAAA,SAAAA,EAArB,eAAqBA,CAArB;AAIA,eAAOuJ,YAAY,CAAnB;AALF,OAAO,CAAP;AAOD;;AACD,QAAMA,YAAY,GAAGvJ,wFAAAA,CAAAA,SAAAA,EAArB,OAAqBA,CAArB;AACA,WAAOuJ,YAAY,CAAnB;AACD;;;;;;;;;;;;;;;;;;;;ACpIH,oBAAe,SAAf,aAAe;AAAA,MAAC,WAAD,QAAC,WAAD;AAAA,MAAgBV,WAAhB,QAAgBA,WAAhB;AAAA,SACb3E,WAAW,GADb,WAAe;AAAA,CAAf;;;;;;;;;;;;;;;;;;;;ACAA,sBAAe,SAAf,eAAe;AACb,SAAO;AACLnP,IAAAA,OAAO,EAAEY,uFADJ;AAELX,IAAAA,WAAW,EAAE,CAACW,0FAAD;AAFR,GAAP;AADF;;;;;;;;;;;;;;;;;;;ACYA;;;;;;IAKA;AAAA;AACE;AA8FD;;;;;SA3FCQ,QAAAA,qBAAK;AAAA,QAAGU,QAAH,QAAGA,QAAH;;AACH;;;;;;;;;;;;;;AAcA,QAAMD,MAAM,GAAZ;;AACA,QAAIC,QAAQ,CAARA,MAAAA,KAAJ,GAA2B;AACzB;AACD;;AACD,QAAI6F,CAAC,GAAL;AACA,QAAI8M,SAAS,GAAb;AACA,QAAM7F,cAAc,GAAG9M,QAAQ,CAA/B;;AACA,SAAK,IAAIgM,CAAC,GAAV,GAAgBA,CAAC,GAAjB,gBAAoCA,CAAC,IAArC,GAA4C;AAC1C,UAAM4G,KAAK,GAAG5S,QAAQ,CAARA,UAAAA,CAAAA,CAAAA,IAAyBA,QAAQ,CAARA,UAAAA,CAAoBgM,CAAC,GAA5D,CAAuChM,CAAvC;;AACA,UAAI2S,SAAS,IAAb,MAAuB;AACrBA,QAAAA,SAAS,GAATA,KAAAA;AACD;;AACD,UAAIC,KAAK,KAAT,WAAyB;AACvB,YAAM5I,CAAC,GAAGgC,CAAC,GAAX;AACA,oBAAY;AACVnG,UAAAA,CADU,EACVA,CADU;AAEVmE,UAAAA,CAFU,EAEVA,CAFU;AAGV4I,UAAAA,KAAK,EAHK;AAIV5S,UAAAA,QAJU,EAIVA,QAJU;AAKVD,UAAAA,MAAAA,EAAAA;AALU,SAAZ;AAOA8F,QAAAA,CAAC,GAADA,CAAAA;AACA8M,QAAAA,SAAS,GAATA,KAAAA;AACD;AACF;;AACD,gBAAY;AACV9M,MAAAA,CADU,EACVA,CADU;AAEVmE,MAAAA,CAAC,EAAE8C,cAAc,GAFP;AAGV8F,MAAAA,KAAK,EAHK;AAIV5S,MAAAA,QAJU,EAIVA,QAJU;AAKVD,MAAAA,MAAAA,EAAAA;AALU,KAAZ;AAOA;AACD;;SAED8S,SAAAA,uBAAM;AAAA,QAAC,CAAD,SAAC,CAAD;AAAA,QAAC,CAAD,SAAC,CAAD;AAAA,QAAC,KAAD,SAAC,KAAD;AAAA,QAAC,QAAD,SAAC,QAAD;AAAA,QAA0B9S,MAA1B,SAA0BA,MAA1B;;AACJ,QAAIiK,CAAC,GAADA,CAAAA,GAAAA,CAAAA,IAAa/F,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,MAAjB,GAAwC;AACtC,UAAM6O,aAAa,GAAG7O,IAAI,CAAJA,GAAAA,CAAtB,KAAsBA,CAAtB;;AACA,UAAI6O,aAAa,GAAbA,CAAAA,IAAqBA,aAAa,IAAI,KAA1C,WAA0D;AACxD,YAAMpJ,KAAK,GAAG1J,QAAQ,CAARA,KAAAA,CAAAA,CAAAA,EAAkB,UAAhC,GAAcA,CAAd;;AACA,gCAAwC,iBAAxC,KAAwC,CAAxC;AAAA,YAAM,YAAN,qBAAM,YAAN;AAAA,YAAsB+S,aAAtB,qBAAsBA,aAAtB;;AACA,eAAO,MAAM,CAAN,KAAY;AACjB3I,UAAAA,OAAO,EADU;AAEjBvE,UAAAA,CAFiB,EAEjBA,CAFiB;AAGjBmE,UAAAA,CAHiB,EAGjBA,CAHiB;AAIjBN,UAAAA,KAAK,EAAE1J,QAAQ,CAARA,KAAAA,CAAAA,CAAAA,EAAkB,UAJR,GAIVA,CAJU;AAKjBgT,UAAAA,YALiB,EAKjBA,YALiB;AAMjBD,UAAAA,aANiB,EAMjBA,aANiB;AAOjBE,UAAAA,SAAS,EAAEL,KAAK,GAAG;AAPF,SAAZ,CAAP;AASD;AACF;;AACD;AACD;;SAEDM,cAAAA,qBAAW,KAAXA,EAAW;AACT;AACA;AACA,QAAIF,YAAY,GAAhB;AACA,QAAID,aAAa,GAAjB;;AAEA,QAAIhO,8DAAAA,CAAJ,KAAIA,CAAJ,EAA2B;AACzBiO,MAAAA,YAAY,GAAZA,OAAAA;AACAD,MAAAA,aAAa,GAAbA,EAAAA;AAFF,WAGO,IAAIlO,8DAAAA,CAAJ,KAAIA,CAAJ,EAA2B;AAChCmO,MAAAA,YAAY,GAAZA,OAAAA;AACAD,MAAAA,aAAa,GAAbA,EAAAA;AAFK,WAGA,IAAI3N,8DAAAA,CAAJ,KAAIA,CAAJ,EAA2B;AAChC4N,MAAAA,YAAY,GAAZA,QAAAA;AACAD,MAAAA,aAAa,GAAbA,EAAAA;AACD;;AACD,WAAO;AACLC,MAAAA,YADK,EACLA,YADK;AAELD,MAAAA,aAAAA,EAAAA;AAFK,KAAP;AAID;;;;;;;;;;;;;;;;;;;;AC/GH,sBAAe,SAAf,eAAe;AAAA,MAAC,KAAD,QAAC,KAAD;AAAA,MAAUE,SAAV,QAAUA,SAAV;AACb,MAAME,QAAQ,GAAGzJ,KAAK,CAALA,MAAAA,CAAjB,CAAiBA,CAAjB;AACA,MAAI2D,WAAW,GAAf;AACA,MAAM+F,cAAc,GAAG,+BAAvB,GAAuB,CAAvB,CAHa,CAGb;;AAEA,MAAIA,cAAc,CAAdA,QAAAA,CAAJ,QAAIA,CAAJ,EAAuC;AACrC/F,IAAAA,WAAW,GAAXA,CAAAA;AADF,SAEO,IAAI8F,QAAQ,CAARA,KAAAA,CAAJ,IAAIA,CAAJ,EAA0B;AAC/B9F,IAAAA,WAAW,GADoB,EAC/BA,CAD+B;AAA1B,SAEA;AACL;AACA;AACAA,IAAAA,WAAW,GAAXA,EAAAA;AACD,GAbY,CAaZ;AAED;;;AACA,MAAI,CAAJ,WAAgB;AACdA,IAAAA,WAAW,IAAXA,CAAAA;AACD;;AACD,SAAOA,WAAW,GAAG3D,KAAK,CAA1B;AAnBF;;;;;;;;;;;;;;;;;;;;ACCA,qBAAgBpK,SAAhB,cAAgBA,CAAAA,KAAD;AACb,MAAIpB,OAAO,GAAGY,wFAAd;;AACA,MAAIQ,KAAK,CAALA,KAAAA,KAAJ,GAAuB;AACrBpB,IAAAA,OAAO,GAAGY,yFAAVZ;AACD;;AACD,SAAO;AACLA,IAAAA,OADK,EACLA,OADK;AAELC,IAAAA,WAAW,EAAE,CAACW,sGAAD;AAFR,GAAP;AALF;;;;;;;;;;;;;;;;;;;;;ACIA;;;;;;IAKA;AAAA;AACE;AAoGD;;;;SAlGCQ,QAAAA,qBAAK;AAAA;;AAAA,QAAGU,QAAH,QAAGA,QAAH;AACH,QAAMR,OAAO,GAAb;AACAG,IAAAA,MAAM,CAANA,IAAAA,CAAYb,8DAAZa,EAAAA,OAAAA,CAAqC0T,UAAAA,SAAD;AAClC,UAAMC,KAAK,GAAGxU,8DAAAA,CAAd,SAAcA,CAAd;AACAqB,MAAAA,sDAAM,UAAU,8BAAhBA,SAAgB,CAAV,CAANA;AAFFR,KAAAA;AAIA,WAAOW,sDAAM,CAAb,OAAa,CAAb;AACD;;SAEDiT,iBAAAA,wBAAc,SAAdA,EAAc,QAAdA,EAAc,KAAdA,EAAc;AACZ,QACE,CAACF,SAAS,CAATA,QAAAA,CAAD,QAACA,CAAD;AAEA,yBAAqBrT,QAAQ,CAARA,MAAAA,CAHvB,KAGuBA,CAArB,CAHF,EAIE;AACA;AACD;;AACD;AACD;;;SAGDwT,SAAAA,gBAAM,QAANA,EAAM,KAANA,EAAM,SAANA,EAAM;AACJ;AACA,QAAMhU,OAAO,GAAb;AACA,QAAIqG,CAAC,GAAL;AACA,QAAMiH,cAAc,GAAG9M,QAAQ,CAA/B;;AACA,WAAO6F,CAAC,GAAGiH,cAAc,GAAzB,GAA+B;AAC7B,UAAI9C,CAAC,GAAGnE,CAAC,GAAT;AACA,UAAI4N,aAAa,GAAjB;AACA,UAAIC,KAAK,GAAT;AACAC,MAAAA,YAAY,GAAG,yCAJc,CAId,CAAfA,CAJ6B;;AAM7B,mBAAa;AACX,YAAMC,QAAQ,GAAG5T,QAAQ,CAARA,MAAAA,CAAgBgK,CAAC,GAAlC,CAAiBhK,CAAjB;AACA,YAAM6T,SAAS,GAAGP,KAAK,CAALA,QAAK,CAALA,IAAlB;AACA,YAAIQ,KAAK,GAAT;AACA,YAAIC,cAAc,GAAG,CAArB;AACA,YAAIC,YAAY,GAAG,CALR,CAKX,CALW;;AAOX,YAAIhK,CAAC,GAAL,gBAAwB;AACtB,cAAMiK,OAAO,GAAGjU,QAAQ,CAARA,MAAAA,CAAhB,CAAgBA,CAAhB;AACA,cAAMkU,eAAe,GAAGL,SAAS,CAAjC;;AACA,eAAK,IAAI7H,CAAC,GAAV,GAAgBA,CAAC,GAAjB,iBAAqCA,CAAC,IAAtC,GAA6C;AAC3C,gBAAMmI,QAAQ,GAAGN,SAAS,CAA1B,CAA0B,CAA1B;AACAG,YAAAA,YAAY,IAF+B,CAE3CA,CAF2C;;AAI3C,0BAAc;AACZ,kBAAMI,aAAa,GAAGD,QAAQ,CAARA,OAAAA,CADV,OACUA,CAAtB,CADY;;AAGZ,kBAAIC,aAAa,KAAK,CAAtB,GAA0B;AACxBN,gBAAAA,KAAK,GAALA,IAAAA;AACAC,gBAAAA,cAAc,GAFU,YAExBA,CAFwB;;AAIxB,oBAAIK,aAAa,KAAjB,GAAyB;AACvB;AACA;AACA;AACA;AACAT,kBAAAA,YAAY,IAAZA,CAAAA;AATsB;;;AAYxB,oBAAIF,aAAa,KAAjB,gBAAsC;AACpC;AACA;AACA;AACAC,kBAAAA,KAAK,IAALA,CAAAA;AACAD,kBAAAA,aAAa,GAAbA,cAAAA;AACD;;AACD;AACD;AACF;AACF;AAvCQ;;;AA0CX,mBAAW;AACTzJ,UAAAA,CAAC,IADQ,CACTA,CADS;AAAX,eAGO;AACL;AACA,cAAIA,CAAC,GAADA,CAAAA,GAAJ,GAAe;AACbxK,YAAAA,OAAO,CAAPA,IAAAA,CAAa;AACX4K,cAAAA,OAAO,EADI;AAEXvE,cAAAA,CAFW,EAEXA,CAFW;AAGXmE,cAAAA,CAAC,EAAEA,CAAC,GAHO;AAIXN,cAAAA,KAAK,EAAE1J,QAAQ,CAARA,KAAAA,CAAAA,CAAAA,EAJI,CAIJA,CAJI;AAKXsT,cAAAA,KAAK,EALM;AAMXI,cAAAA,KANW,EAMXA,KANW;AAOXC,cAAAA,YAAAA,EAAAA;AAPW,aAAbnU;AAHG;;;AAcLqG,UAAAA,CAAC,GAADA,CAAAA;AACA;AACD;AACF;AACF;;AACD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;ACtGH,IAAMwO,iBAAiB,GAAIf,SAArBe,iBAAqBf,CAAAA,KAAD;AACxB,MAAIgB,OAAO,GAAX;AACA3U,EAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,EAAAA,OAAAA,CAA4BC,UAAAA,GAAD;AACzB,QAAM2U,SAAS,GAAGjB,KAAK,CAAvB,GAAuB,CAAvB;AACAgB,IAAAA,OAAO,IAAIC,SAAS,CAATA,MAAAA,CAAkBC,UAAAA,KAAD;AAAA,aAAmB,CAAC,CAArCD,KAAiB;AAAA,KAAjBA,EAAXD,MAAAA;AAFF3U,GAAAA;AAIA2U,EAAAA,OAAO,IAAI3U,MAAM,CAANA,OAAAA,CAAAA,KAAAA,EAAX2U,MAAAA;AACA;AAPF;;AAUA,IAAMG,wBAAwB,GAAG,SAA3BA,wBAA2B;AAAA,MAAC,KAAD,QAAC,KAAD;AAAA,MAAC,KAAD,QAAC,KAAD;AAAA,MAG/Bf,KAH+B,QAG/BA,KAH+B;AAK/B,MAAMgB,gBAAgB,GAAG/U,MAAM,CAANA,IAAAA,CAAYb,8DAAAA,CAAZa,KAAYb,CAAZa,EAAzB;AACA,MAAMgV,aAAa,GAAGN,iBAAiB,CAACvV,8DAAAA,CAAxC,KAAwCA,CAAD,CAAvC;AAEA,MAAIoE,OAAO,GAAX;AACA,MAAM0R,WAAW,GAAGlL,KAAK,CAAzB,OAT+B,CAS/B;;AAEA,OAAK,IAAI7D,CAAC,GAAV,GAAgBA,CAAC,IAAjB,aAAkCA,CAAC,IAAnC,GAA0C;AACxC,QAAMgP,aAAa,GAAG5Q,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,EAAgB4B,CAAC,GAAvC,CAAsB5B,CAAtB;;AACA,SAAK,IAAI+F,CAAC,GAAV,GAAgBA,CAAC,IAAjB,eAAoCA,CAAC,IAArC,GAA4C;AAC1C9G,MAAAA,OAAO,IAAIqN,iEAAAA,CAAU1K,CAAC,GAAX0K,CAAAA,EAAiBvG,CAAC,GAAlBuG,CAAAA,IAAAA,gBAAAA,YAA6CoE,aAA7CpE,EAAXrN,CAAWqN,CAAXrN;AACD;AACF;;AACD;AAjBF;;AAoBA,qBAAe,SAAf,cAAe;AAAA,MAAC,KAAD,SAAC,KAAD;AAAA,MAAC,KAAD,SAAC,KAAD;AAAA,MAAC,YAAD,SAAC,YAAD;AAAA,MAIbwQ,KAJa,SAIbA,KAJa;AAMb,MAAIxQ,OAAO,GAAGuR,wBAAwB,CAAC;AAAE/K,IAAAA,KAAF,EAAEA,KAAF;AAAS4J,IAAAA,KAAT,EAASA,KAAT;AAAgBI,IAAAA,KAAAA,EAAAA;AAAhB,GAAD,CAAtC,CANa,CAMb;AAGA;;AACA,oBAAkB;AAChB,QAAMoB,cAAc,GAAGpL,KAAK,CAALA,MAAAA,GAAvB;;AACA,QAAIiK,YAAY,KAAZA,CAAAA,IAAsBmB,cAAc,KAAxC,GAAgD;AAC9C5R,MAAAA,OAAO,IAAPA,CAAAA;AADF,WAEO;AACL,UAAI6R,iBAAiB,GAArB;;AACA,WAAK,IAAIlP,CAAC,GAAV,GAAgBA,CAAC,IAAI5B,IAAI,CAAJA,GAAAA,CAAAA,YAAAA,EAArB,cAAqBA,CAArB,EAA6D4B,CAAC,IAA9D,GAAqE;AACnEkP,QAAAA,iBAAiB,IAAIxE,iEAAAA,CAAUoD,YAAY,GAAtBpD,cAAAA,EAArBwE,CAAqBxE,CAArBwE;AACD;;AACD7R,MAAAA,OAAO,IAAPA,iBAAAA;AACD;AACF;;AACD,SAAOe,IAAI,CAAJA,KAAAA,CAAP,OAAOA,CAAP;AAtBF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA,IAAM+Q,aAAa,GAAG,SAAhBA,aAAgB;AAIpB,MAAIpL,UAAU,GAAd;;AACA,MAAItK,KAAK,CAALA,KAAAA,CAAAA,MAAAA,GAAqBU,QAAQ,CAAjC,QAA0C;AACxC,QAAIV,KAAK,CAALA,KAAAA,CAAAA,MAAAA,KAAJ,GAA8B;AAC5BsK,MAAAA,UAAU,GAAVA,gFAAAA;AADF,WAEO;AACLA,MAAAA,UAAU,GAAVA,+EAAAA;AACD;AACF;;AACD;AAZF;;AAmBA,IAAMlK,QAAQ,GAAa;AACzBtB,EAAAA,UAAU,EADe;AAEzBC,EAAAA,IAAI,EAFqB;AAGzBC,EAAAA,UAAU,EAHe;AAIzBC,EAAAA,KAAK,EAJoB;AAKzBC,EAAAA,MAAM,EALmB;AAMzBC,EAAAA,QAAQ,EANiB;AAOzBC,EAAAA,OAAO,EAAEC,wEAAAA;AAPgB,CAA3B;;AAUA,IAAMsW,UAAU,GAAG,SAAbA,UAAa;AACjB,MAAIvV,QAAQ,CAAZ,IAAY,CAAZ,EAAoB;AAClB,WAAOA,QAAQ,CAARA,IAAQ,CAARA,CAAP,KAAOA,CAAP;AACD;;AACD,MAAIZ,gEAAAA,CAAAA,IAAAA,KAA0B,aAAaA,gEAAAA,CAA3C,IAA2CA,CAA3C,EAAmE;AACjE,WAAOA,gEAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CAAP,KAAOA,CAAP;AACD;;AACD;AAPF;AAWA;AACA;;;AACA,sBAAe,SAAf,eAAe;AACb,MAAMoW,SAAS,GAAf,GADa,CACb;;AAEA,MAAI,sBAAsB5V,KAAK,CAALA,OAAAA,IAA1B,MAAiD;AAC/C;AACD;;AAED,MAAMsK,UAAU,GAAGoL,aAAa,QAAhC,QAAgC,CAAhC;AAEA,MAAMG,gBAAgB,GAAGF,UAAU,CAAC3V,KAAK,CAAN,SAAnC,KAAmC,CAAnC;AACA,MAAI4D,OAAO,GAAX;;AACA,MAAI,4BAAJ,UAA0C;AACxCA,IAAAA,OAAO,GAAPA,gBAAAA;AADF,SAEO,IAAI5D,KAAK,CAALA,OAAAA,KAAJ,cAAoC;AACzC4D,IAAAA,OAAO,GAAGiS,gBAAgB,CAA1BjS,WAAAA;AACAgS,IAAAA,SAAS,CAATA,WAAAA,GAAwBC,gBAAgB,CAAxCD,WAAAA;AACAA,IAAAA,SAAS,CAATA,mBAAAA,GAAgCC,gBAAgB,CAAhDD,mBAAAA;AACAA,IAAAA,SAAS,CAATA,cAAAA,GAA2BC,gBAAgB,CAA3CD,cAAAA;AACD;;AAED,MAAME,YAAY,GAAGnR,IAAI,CAAJA,GAAAA,CAAAA,OAAAA,EAArB,UAAqBA,CAArB;AACA,4FAAO,KAAP,EAAO,SAAP;AAGEf,IAAAA,OAAO,EAHF,YAAP;AAIEmS,IAAAA,YAAY,EAAE9E,2DAAAA,CAAAA,YAAAA;AAJhB;AArBF;;;;;;;;;;;;;;;;;;;;;;;ACzDA,IAAM+E,aAAa,GAAG;AACpBtV,EAAAA,QAAQ,EADY;AAEpBuV,EAAAA,OAAO,EAFa;AAGpBC,EAAAA,eAAe,EAHK;AAIpBC,EAAAA,SAJoB,qBAIX,IAJW,EAIX,SAJW,EAIX;AACP,QAAM1V,MAAM,GAAZ;;AACA,SAAK,IAAI8F,CAAC,GAAV,GAAgBA,CAAC,GAAjB,MAA0BA,CAAC,IAA3B,GAAkC;AAChC,UAAIhD,KAAK,GAAT;;AACA,UAAI6S,SAAS,KAAb,UAA4B;AAC1B7S,QAAAA,KAAK,GAALA,EAAAA;AACD;;AACD9C,MAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA;AACD;;AACD;AAbkB;AAepB;AACA4V,EAAAA,mBAhBoB,+BAgBD,CAhBC,EAgBD,CAhBC,EAgBD;AACjB,WAAO;AACLvL,MAAAA,OAAO,EADF;AAELV,MAAAA,KAAK,EAAE,uBAAuB,UAFzB,GAEE,CAFF;AAGL7D,MAAAA,CAHK,EAGLA,CAHK;AAILmE,MAAAA,CAAAA,EAAAA;AAJK,KAAP;AAjBkB;AAwBpB;AACA;AACA;AACA6I,EAAAA,MA3BoB,kBA2Bd,KA3Bc,EA2Bd,cA3Bc,EA2Bd;AAAA;;AACJ,QAAM7G,CAAC,GAAG1M,KAAK,CAAf;AACA,QAAMsW,cAAc,GAAGC,4DAAe,QAAQ,KAA9C,QAAsC,CAAtC;AACA,QAAIC,EAAE,GAAGF,cAAc,CAAvB;;AACA,QAAIG,cAAc,GAAlB,GAAwB;AACtB;AACA;AACA;AACA;AACAD,MAAAA,EAAE,IAAI,gBAAgBF,cAAc,CAAdA,CAAAA,GAAhB,GAAsCG,cAAc,GAA1DD,CAAM,CAANA;AACD,KAVG,CAUH;;;AAED,QAAIlQ,CAAC,GAAG2K,+DAAAA,CAAAA,cAAAA,IAAR;;AACA,QAAI,CAAC,KAAL,iBAA2B;AACzB3K,MAAAA,CAAC,aAAIrB,mFAAJ,EAA4CwR,cAAc,GAA3DnQ,CAAC,CAADA;AACD,KAfG,CAeH;AAED;AACA;AACA;;;AACA,QAAIoQ,UAAU,GAAd;AACArW,IAAAA,MAAM,CAANA,IAAAA,CAAY,eAAZA,CAAY,CAAZA,EAAAA,OAAAA,CAAwCsW,UAAAA,sBAAD;AACrC,UAAMC,oBAAoB,GAAG,mBAA7B,sBAA6B,CAA7B;;AACA,UAAI/L,QAAQ,yBAARA,EAAQ,CAARA,IAAJ,gBAA4D;AAC1D,YAAI+L,oBAAoB,IAAxB,GAA+B;AAC7BF,UAAAA,UAAU,GAAVA,IAAAA;AACD;AACF;AANHrW,KAAAA;;AAQA,QAAI,CAAJ,YAAiB;AACf;AACA;AACA;AACA;AACD;AA7DiB;AAgEpB;AACAwW,EAAAA,gBAjEoB,4BAiEJ,iBAjEI,EAiEJ;AAAA;;AACd;AACA,QAAI7W,KAAK,GAAG,4BAAZ,iBAAY,CAAZ;AACA;;AAHc,+BAILuG,CAJK;AAKZ;AACA;AACA;AACAvG,MAAAA,KAAK,GAAG,8BAARA,iBAAQ,CAARA;AACA,UAAM8W,GAAG,GAAG,iBAAevQ,CAAC,GALkB,CAKlC,CAAZ,CATY,CAIkC;;AAO9ClG,MAAAA,MAAM,CAANA,IAAAA,CAAAA,GAAAA,EAAAA,OAAAA,CAA0BoW,UAAAA,cAAD;AACvB,YAAMM,SAAS,GAAGD,GAAG,CAArB,cAAqB,CAArB,CADuB,CACvB;AAEA;AACA;AACA;;AACA,YAAIC,SAAS,CAATA,OAAAA,KAAJ,cAAwC;AACtC;AACA,+BAAmBlM,QAAQ,iBAARA,EAAQ,CAARA,GAAnB;AACD;AATHxK,OAAAA;AAXY;;AAId,SAAK,IAAIkG,CAAC,GAAV,GAAgBA,CAAC,IAAjB,mBAAwCA,CAAC,IAAzC,GAAgD;AAAA,YAAvCA,CAAuC;AAkB/C;AAvFiB;AA0FpB;AACA;AACAyQ,EAAAA,MA5FoB,kBA4Fd,cA5Fc,EA4Fd;AACJ,QAAMC,oBAAoB,GAA1B;AACA,QAAIvK,CAAC,GAAGc,cAAc,GAAtB,EAFI,CAEJ;;AAEA,QAAIiJ,cAAc,GAAlB,EAJI,CAIJ;;AAEA,QAAInQ,CAAC,GAAL;AACA,QAAMsG,IAAI,GAAG,eAAb,CAAa,CAAb,CAPI,CAOJ;;AAEA,cAAU;AACRvM,MAAAA,MAAM,CAANA,IAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CAA2B6W,UAAAA,uBAAD;AACxB,YAAMC,oBAAoB,GAAGvK,IAAI,CAAjC,uBAAiC,CAAjC;;AACA,YAAIuK,oBAAoB,GAAxB,GAA8B;AAC5BV,UAAAA,cAAc,GAAG5L,QAAQ,0BAAzB4L,EAAyB,CAAzBA;AACAnQ,UAAAA,CAAC,GAADA,oBAAAA;AACD;AALHjG,OAAAA;AAOD;;AACD,WAAOqM,CAAC,IAAR,GAAe;AACb,UAAM1M,KAAK,GAAkB,kBAA7B,cAA6B,CAA7B;AACAiX,MAAAA,oBAAoB,CAApBA,OAAAA,CAAAA,KAAAA;AACAvK,MAAAA,CAAC,GAAG1M,KAAK,CAALA,CAAAA,GAAJ0M,CAAAA;AACA+J,MAAAA,cAAc,IAAdA,CAAAA;AACD;;AACD;AACD;AArHmB,CAAtB;AAwHA,cAAe;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAW,EAAAA,0BAjCa,sCAiCa,QAjCb,EAiCa,OAjCb,EAoCXlB,eApCW,EAiCa;AAAA,QAGxBA,eAHwB;AAGxBA,MAAAA,eAHwB;AAAA;;AAKxBF,IAAAA,aAAa,CAAbA,QAAAA,GAAAA,QAAAA;AACAA,IAAAA,aAAa,CAAbA,eAAAA,GAAAA,eAAAA;AACA,QAAMxI,cAAc,GAAG9M,QAAQ,CAA/B,OAPwB,CAOxB;;AAEA,QAAI2W,oBAAoB,GAAGrB,aAAa,CAAbA,SAAAA,CAAAA,cAAAA,EAA3B,OAA2BA,CAA3B;AAKA9V,IAAAA,OAAO,CAAPA,OAAAA,CAAiBF,UAAAA,KAAD;AACdqX,MAAAA,oBAAoB,CAACrX,KAAK,CAA1BqX,CAAoB,CAApBA,CAAAA,IAAAA,CAAAA,KAAAA;AADFnX,KAAAA,EAdwB,CAcxBA;;AAIAmX,IAAAA,oBAAoB,GAAGA,oBAAoB,CAApBA,GAAAA,CAA0BrX,UAAAA,KAAD;AAAA,aAC9CA,KAAK,CAALA,IAAAA,CAAW;AAAA,eAA0CqJ,EAAE,CAAFA,CAAAA,GAAOC,EAAE,CADhE+N,CACa;AAAA,OAAXrX,CAD8C;AAAA,KAAzBqX,CAAvBA;AAIArB,IAAAA,aAAa,CAAbA,OAAAA,GAAwB;AACtB;AACA;AACA;AACA;AACA;AACA;AACAsB,MAAAA,CAAC,EAAEtB,aAAa,CAAbA,SAAAA,CAAAA,cAAAA,EAPmB,QAOnBA,CAPmB;AAQtB;AACA;AACAQ,MAAAA,EAAE,EAAER,aAAa,CAAbA,SAAAA,CAAAA,cAAAA,EAVkB,QAUlBA,CAVkB;AAWtB;AACA1P,MAAAA,CAAC,EAAE0P,aAAa,CAAbA,SAAAA,CAAAA,cAAAA,EAAAA,QAAAA;AAZmB,KAAxBA;;AAeA,SAAK,IAAItJ,CAAC,GAAV,GAAgBA,CAAC,GAAjB,gBAAoCA,CAAC,IAArC,GAA4C;AAC1C2K,MAAAA,oBAAoB,CAApBA,CAAoB,CAApBA,CAAAA,OAAAA,CAAiCrX,UAAAA,KAAD;AAC9B,YAAIA,KAAK,CAALA,CAAAA,GAAJ,GAAiB;AACfK,UAAAA,MAAM,CAANA,IAAAA,CAAY2V,aAAa,CAAbA,OAAAA,CAAAA,CAAAA,CAAwBhW,KAAK,CAALA,CAAAA,GAApCK,CAAY2V,CAAZ3V,EAAAA,OAAAA,CACGoW,UAAAA,cAAD;AACET,YAAAA,aAAa,CAAbA,MAAAA,CAAAA,KAAAA,EAA4BnL,QAAQ,iBAARA,EAAQ,CAARA,GAA5BmL,CAAAA;AAFJ3V,WAAAA;AADF,eAMO;AACL2V,UAAAA,aAAa,CAAbA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA;AACD;AATHqB,OAAAA;AAWArB,MAAAA,aAAa,CAAbA,gBAAAA,CAAAA,CAAAA;AACD;;AACD,QAAMiB,oBAAoB,GAAGjB,aAAa,CAAbA,MAAAA,CAA7B,cAA6BA,CAA7B;AACA,QAAMuB,qBAAqB,GAAGN,oBAAoB,CAAlD;AACA,QAAMrT,OAAO,GAAG,0BAAhB,qBAAgB,CAAhB;AACA,WAAO;AACLlD,MAAAA,QADK,EACLA,QADK;AAELkD,MAAAA,OAFK,EAELA,OAFK;AAGLmS,MAAAA,YAAY,EAAE9E,2DAAAA,CAHT,OAGSA,CAHT;AAIL9R,MAAAA,QAAQ,EAAE8X;AAJL,KAAP;AAvFW;AA+FbO,EAAAA,UA/Fa,sBA+FH,QA/FG,EA+FH,qBA/FG,EA+FH;AACR,QAAMhK,cAAc,GAAG9M,QAAQ,CAA/B;AACA,QAAIkD,OAAO,GAAX;;AACA,QAAIlD,QAAQ,CAARA,MAAAA,KAAJ,GAA2B;AACzBkD,MAAAA,OAAO,GAAPA,CAAAA;AADF,WAEO;AACLA,MAAAA,OAAO,GACLoS,aAAa,CAAbA,OAAAA,CAAAA,CAAAA,CAAwBxI,cAAc,GAAtCwI,CAAAA,EADFpS,qBACEoS,CADFpS;AAED;;AACD;AACD;AAzGY,CAAf;;;;;;;;;;;;;;;;AC7HA,YAAe;AACb;AACA;AACA6T,EAAAA,GAHa,eAGV,CAHU,EAGV,CAHU,EAGV;AACD,QAAIC,KAAK,GAAT;;AACA,QAAIhL,CAAC,GAAL,OAAe;AACb;AACD;;AACD,QAAIA,CAAC,KAAL,GAAa;AACX;AACD;;AACD,QAAIiL,KAAK,GAAT;;AACA,SAAK,IAAIpR,CAAC,GAAV,GAAgBA,CAAC,IAAjB,GAAwBA,CAAC,IAAzB,GAAgC;AAC9BoR,MAAAA,KAAK,IAALA,KAAAA;AACAA,MAAAA,KAAK,IAALA,CAAAA;AACAD,MAAAA,KAAK,IAALA,CAAAA;AACD;;AACD;AAjBW;AAmBbE,EAAAA,KAnBa,iBAmBR,CAnBQ,EAmBR;AACH,WAAOjT,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,IAAcA,IAAI,CAAJA,GAAAA,CAArB,EAAqBA,CAArB,CADG,CACH;AApBW;AAsBbkT,EAAAA,IAtBa,gBAsBT,CAtBS,EAsBT;AACF,WAAOlT,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,IAAcA,IAAI,CAAJA,GAAAA,CAArB,CAAqBA,CAArB;AAvBW;AAyBbmT,EAAAA,SAzBa,qBAyBJ,GAzBI,EAyBJ;AACP,QAAIC,IAAI,GAAR;;AACA,SAAK,IAAIxR,CAAC,GAAV,GAAgBA,CAAC,IAAjB,KAA0BA,CAAC,IAA3B;AAAkCwR,MAAAA,IAAI,IAAJA,CAAAA;AAAlC;;AACA;AACD;AA7BY,CAAf;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEO,IAAMC,IAAI,GAAG,+BAAb;;;;;;;;;;;;;;;;;;;;;;ACTP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;IAEqBG;;;;;;;;;SACpBC,SAAA,gBAAOC,KAAP,EAAc;AACb,yBAAMD,MAAN,YAAaC,KAAb;AACA;;SAEDC,OAAA,gBAAO;AACN,QAAQC,OAAR,GAAoB,KAAKC,KAAzB,CAAQD,OAAR;AACA,WACC;AAAM,eAAS,EAAC,WAAhB;AAA4B,aAAO,EAAE;AAAA,eAAMA,OAAO,CAAC,CAACA,OAAO,EAAT,CAAb;AAAA;AAArC,OACEL,iEAAI,iBAAcK,OAAO,KAAK,QAAL,GAAgB,EAArC,EADN,CADD;AAKA;;;EAZqCN;;;;;;;;;;;;;;;;;;;;;;;;;ACZvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;CAGA;;AACA,IAAMtR,CAAC,GAAG+R,GAAG,CAACC,UAAJ,CAAeC,KAAf,CAAqBC,IAArB,CAA0BH,GAAG,CAACC,UAA9B,CAAV;;IAEqBG;;;;;;;;;SACpBV,SAAA,gBAAOC,KAAP,EAAc;AACb,yBAAMD,MAAN,YAAaC,KAAb;AACA;;SAEDC,OAAA,gBAAO;AACN,sBAAyC,KAAKE,KAA9C;AAAA,QAAQO,WAAR,eAAQA,WAAR;AAAA,QAAqBC,eAArB,eAAqBA,eAArB;AAEA,WACC;AACA;AACA;AAEA;AAAK,iBAAS,EAAC;AAAf,SACC;AACC,iBAAS,EAAC,uBADX;AAEC,YAAI,EAAC,UAFN;AAGC,YAAI,EAAEA,eAAe,KAAK,MAAL,GAAc,UAHpC;AAIC,mBAAW,EAAEP,sEAAW,CAAC9R,CAAC,CAAC,wCAAD,CAAF,CAJzB;AAKC,YAAI,EAAEoS,WAAW,CAACrY,QALnB;AAMC,gBAAQ,EAAEqY,WAAW,CAACE;AANvB,QADD,EASC,EAAC,kDAAD;AAAW,eAAO,EAAED;AAApB,QATD;AALD;AAiBA;;;EAzB8Cf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;CAGA;;AACA,IAAMtR,CAAC,GAAG+R,GAAG,CAACC,UAAJ,CAAeC,KAAf,CAAqBC,IAArB,CAA0BH,GAAG,CAACC,UAA9B,CAAV;AACA,IAAMS,IAAI,GAAMpB,yCAAN,0BAAV,EACA;;AACA,IAAMqB,QAAQ,GAAG,SAAXA,QAAW,CAAC/Y,GAAD;AAAA,SAASoY,GAAG,CAACY,KAAJ,CAAUC,SAAV,CAAuBvB,yCAAvB,SAA+B1X,GAA/B,CAAT;AAAA,CAAjB;;IAEqBkZ;;;;;;;;;SACpBpB,SAAA,gBAAOC,KAAP,EAAc;AACb,yBAAMD,MAAN,YAAaC,KAAb;;AAEA,SAAKoB,aAAL,GAAqB,IAAIP,mEAAJ,CAAW,EAAX,CAArB;AACA,SAAKQ,aAAL,GAAqB,IAAIR,mEAAJ,CAAWS,SAAX,CAArB;AACA,SAAKC,aAAL,GAAqB,IAAIV,mEAAJ,CAAW,EAAX,CAArB;AACA;;SAEDZ,OAAA,gBAAO;AACN,sBAA0E,KAAKE,KAA/E;AAAA,QAAQO,WAAR,eAAQA,WAAR;AAAA,QAAqBC,eAArB,eAAqBA,eAArB;AAAA,QAAsCa,eAAtC,eAAsCA,eAAtC;AAAA,QAAuDC,cAAvD,eAAuDA,cAAvD;AAEA,WACC;AACA;AACA;AAEA;AAAK,iBAAS,EAAC;AAAf,SACC;AACC,iBAAS,oBAAiBT,QAAQ,CAAC,sBAAD,CAAR,GAAmC,WAAnC,GAAiD,EAAlE,CADV;AAEC,YAAI,EAAES,cAAc,GAAG,iBAAH,GAAuB,UAF5C;AAGC,YAAI,EAAEd,eAAe,KAAK,MAAL,GAAc,UAHpC;AAIC,mBAAW,EACVc,cAAc,GACXnT,CAAC,CAAC,yDAAD,CADU,GAEX8R,sEAAW,CAAC9R,CAAC,CAAC,yCAAD,CAAF,CAPhB;AASC,aAAK,EAAEmT,cAAc,GAAGf,WAAW,CAACgB,eAAZ,EAAH,GAAmChB,WAAW,CAACrY,QAAZ,EATzD;AAUC,gBAAQ,EAAEqY,WAAW,CAACE,OAVvB;AAWC,eAAO,EAAE,KAAKe,YAAL,CAAkBnB,IAAlB,CAAuB,IAAvB,CAXV;AAYC,aAAK,EAAE;AACNoB,UAAAA,KAAK,EACJZ,QAAQ,CAAC,kBAAD,CAAR,IACA,CAACL,eAAe,EADhB,KAEC,CAACa,eAAD,IAAoBC,cAFrB,IAGG,KAAKF,aAAL,EAHH,GAIGD,SANE;AAONO,UAAAA,WAAW,EACVb,QAAQ,CAAC,wBAAD,CAAR,KACC,CAACQ,eAAD,IAAoBC,cADrB,IAEG,KAAKF,aAAL,EAFH,GAGGD;AAXE;AAZR,QADD,EA4BEN,QAAQ,CAAC,sBAAD,CAAR,GAAmC,EAAC,kDAAD;AAAW,eAAO,EAAEL;AAApB,QAAnC,GAA6E,IA5B/E,EA8BE,CAACa,eAAD,IAAoBC,cAApB,GACA,EAAC,0DAAD;AACC,aAAK,EAAE,KAAKJ,aAAL,EADR;AAEC,aAAK,EAAE,KAAKD,aAAL,EAFR;AAGC,aAAK,EAAE,KAAKG,aAAL;AAHR,QADA,GAMG,IApCL;AALD;AA4CA;;SAEDI,eAAA,sBAAa3T,CAAb,EAAgB;AACf,uBAAwC,KAAKmS,KAA7C;AAAA,QAAQO,WAAR,gBAAQA,WAAR;AAAA,QAAqBe,cAArB,gBAAqBA,cAArB;AAEA,QAAMpZ,QAAQ,GAAG2F,CAAC,CAAC8T,MAAF,CAAS5W,KAA1B;;AAEA,QAAIuW,cAAJ,EAAoB;AACnBf,MAAAA,WAAW,CAACgB,eAAZ,CAA4BrZ,QAA5B;AACA,KAFD,MAEO;AACNqY,MAAAA,WAAW,CAACrY,QAAZ,CAAqBA,QAArB;AACA;;AAED,QAAIA,QAAJ,EAAc;AACb;AACA,oBAAgBsJ,uDAAM,CAACtJ,QAAD,CAAtB;AAAA,UAAMhB,KAAN,WAAMA,KAAN;;AACA,WAAKga,aAAL,CAAmBha,KAAnB,EAHa,CAKb;;AACA,cAAQA,KAAR;AACC,aAAK,CAAL;AACA,aAAK,CAAL;AACC,eAAK+Z,aAAL,CAAmB9S,CAAC,CAAIyS,IAAJ,WAApB;AACA,eAAKQ,aAAL,UAA0BP,QAAQ,CAAC,WAAD,CAAlC;AACA;;AAED,aAAK,CAAL;AACA,aAAK,CAAL;AACC,eAAKI,aAAL,CAAmB9S,CAAC,CAAIyS,IAAJ,aAApB;AACA,eAAKQ,aAAL,UAA0BP,QAAQ,CAAC,aAAD,CAAlC;AACA;;AAED,aAAK,CAAL;AACC,eAAKI,aAAL,CAAmB9S,CAAC,CAAIyS,IAAJ,aAApB;AACA,eAAKQ,aAAL,UAA0BP,QAAQ,CAAC,aAAD,CAAlC;AACA;AAhBF;AAkBA,KAxBD,MAwBO;AACN,WAAKK,aAAL,CAAmBC,SAAnB;AACA,WAAKF,aAAL,CAAmB,EAAnB;AACA,WAAKG,aAAL,CAAmBD,SAAnB;AACA;AACD;;;EAlG+C1B;;;;;;;;;;;;;;;;;;;;;;ACvBjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;IAEqBkB;;;;;;;;;SACpBf,SAAA,gBAAOC,KAAP,EAAc;AACb,yBAAMD,MAAN,YAAaC,KAAb;AACA;;SAEDC,OAAA,gBAAO;AAAA;;AACN,sBAAyB,KAAKE,KAA9B;AAAA,QAAQlI,KAAR,eAAQA,KAAR;AAAA,QAAe2J,KAAf,eAAeA,KAAf;AACA,WACC;AAAK,eAAS,0BAAuB3J,KAAK,GAAG,QAAH,GAAc,EAA1C;AAAd,OACC;AAAK,eAAS,EAAC;AAAf,OACC;AAAK,eAAS,EAAC;AAAf,OACE,CAAC,MAAD,EAAS,QAAT,EAAmB,QAAnB,EAA6B8J,GAA7B,CAAiC,UAAC9Z,GAAD;AAAA,aACjC,EAAC,YAAD;AAAc,aAAK,EAAE2Z,KAArB;AAA4B,cAAM,EAAE,KAAI,CAACI,YAAL,CAAkB/Z,GAAlB;AAApC,QADiC;AAAA,KAAjC,CADF,CADD,EAMC;AAAK,eAAS,EAAC;AAAf,OACC,gBAAOgQ,KAAP,CADD,CAND,CADD,CADD;AAcA;;SAED+J,eAAA,sBAAa/Z,GAAb,EAAkB;AACjB,QAAQZ,KAAR,GAAkB,KAAK8Y,KAAvB,CAAQ9Y,KAAR;;AACA,YAAQY,GAAR;AACC,WAAK,MAAL;AACC,YAAI+J,MAAM,CAACiQ,SAAP,CAAiB5a,KAAjB,CAAJ,EAA6B;AAC5B,iBAAO,IAAP;AACA;;AACF,WAAK,QAAL;AACC,YAAIA,KAAK,IAAI,CAAb,EAAgB;AACf,iBAAO,IAAP;AACA;;AACF,WAAK,QAAL;AACC,YAAIA,KAAK,IAAI,CAAb,EAAgB;AACf,iBAAO,IAAP;AACA;;AAEF;AACC,eAAO,KAAP;AAfF;AAiBA;;;EA1C6CuY;;;;IA6CzCsC;;;;;;;;;UACLjC,OAAA,gBAAO;AACN,uBAA0B,KAAKE,KAA/B;AAAA,QAAQyB,KAAR,gBAAQA,KAAR;AAAA,QAAeO,MAAf,gBAAeA,MAAf;AACA,QAAMC,eAAe,GAAGD,MAAM,GAAGP,KAAH,GAAWN,SAAzC;AACA,WAAO;AAAK,eAAS,EAAC,cAAf;AAA8B,WAAK,EAAE;AAAEc,QAAAA,eAAe,EAAfA;AAAF;AAArC,MAAP;AACA;;;EALyBxC;;;;;;;;;;;;;;;;;;;;;;;;;ACxD3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAS,yEAAA,CAAqBV,yCAArB,EAA2B,YAAM;AAChC,WAAS8C,YAAT,GAAwB;AACvB,SAAK9B,eAAL,GAAuB,IAAIE,mEAAJ,CAAW,KAAX,CAAvB;AACA;;AACDrY,EAAAA,4DAAM,CAAC6Z,qFAAD,EAAuB,QAAvB,EAAiCI,YAAjC,CAAN;AACAja,EAAAA,4DAAM,CAAC8Z,sFAAD,EAAwB,QAAxB,EAAkCG,YAAlC,CAAN;AAEAja,EAAAA,4DAAM,CAAC6Z,qFAAD,EAAuB,QAAvB,EAAiC,UAAUM,KAAV,EAAiB;AACvD,QAAItC,wEAAA,CAAuBV,yCAAvB,+BAAuDgD,KAAK,CAACC,GAAN,CAAU,UAAV,CAA3D,EAAkF;AACjFD,MAAAA,KAAK,CAACE,UAAN,CACC,UADD,EAEC,EAAC,sEAAD;AACC,mBAAW,EAAE,IADd;AAEC,uBAAe,EAAE,KAAKlC,eAAL,CAAqBH,IAArB,CAA0B,IAA1B;AAFlB,QAFD;AAOA;AACD,GAVK,CAAN;AAYAhY,EAAAA,4DAAM,CAAC8Z,sFAAD,EAAwB,QAAxB,EAAkC,UAAUK,KAAV,EAAiB;AACxD,QAAI,CAAC,KAAKxC,KAAL,CAAWpO,KAAhB,EAAuB;AACtB,UAAMyP,eAAe,GACpBmB,KAAK,CAACC,GAAN,CAAU,wBAAV,KAAuC,KAAKlB,eAAL,KAAyBJ,SADjE;AAGAqB,MAAAA,KAAK,CAACE,UAAN,CACC,UADD,EAEC,EAAC,uEAAD;AACC,mBAAW,EAAE,IADd;AAEC,uBAAe,EAAE,KAAKlC,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAFlB;AAGC,uBAAe,EAAEgB;AAHlB,QAFD;;AASA,UAAIA,eAAJ,EAAqB;AACpBmB,QAAAA,KAAK,CAACE,UAAN,CACC,wBADD,EAEC,EAAC,uEAAD;AACC,qBAAW,EAAE,IADd;AAEC,yBAAe,EAAE,KAAKlC,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAFlB;AAGC,yBAAe,EAAEgB,eAHlB;AAIC,wBAAc,EAAE;AAJjB,UAFD;AASA;AACD;AACD,GA1BK,CAAN;AA2BA,CA9CD;;;;;;;;;;;ACnBA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;ACAe,SAASsB,QAAT,GAAoB;AACjCA,EAAAA,QAAQ,GAAG9a,MAAM,CAAC+a,MAAP,IAAiB,UAAUjB,MAAV,EAAkB;AAC5C,SAAK,IAAI5T,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8U,SAAS,CAAC1I,MAA9B,EAAsCpM,CAAC,EAAvC,EAA2C;AACzC,UAAI+U,MAAM,GAAGD,SAAS,CAAC9U,CAAD,CAAtB;;AAEA,WAAK,IAAIjG,GAAT,IAAgBgb,MAAhB,EAAwB;AACtB,YAAIjb,MAAM,CAAC0a,SAAP,CAAiBQ,cAAjB,CAAgCC,IAAhC,CAAqCF,MAArC,EAA6Chb,GAA7C,CAAJ,EAAuD;AACrD6Z,UAAAA,MAAM,CAAC7Z,GAAD,CAAN,GAAcgb,MAAM,CAAChb,GAAD,CAApB;AACD;AACF;AACF;;AAED,WAAO6Z,MAAP;AACD,GAZD;;AAcA,SAAOgB,QAAQ,CAACM,KAAT,CAAe,IAAf,EAAqBJ,SAArB,CAAP;AACD;;;;;;;;;;;;;;;;AChBD;AACe,SAASM,cAAT,CAAwBC,QAAxB,EAAkCC,UAAlC,EAA8C;AAC3DD,EAAAA,QAAQ,CAACb,SAAT,GAAqB1a,MAAM,CAACyb,MAAP,CAAcD,UAAU,CAACd,SAAzB,CAArB;AACAa,EAAAA,QAAQ,CAACb,SAAT,CAAmBzb,WAAnB,GAAiCsc,QAAjC;AACAF,EAAAA,8DAAc,CAACE,QAAD,EAAWC,UAAX,CAAd;AACD;;;;;;;;;;;;;;;ACLc,SAASE,eAAT,CAAyBtV,CAAzB,EAA4BsK,CAA5B,EAA+B;AAC5CgL,EAAAA,eAAe,GAAG1b,MAAM,CAACqb,cAAP,IAAyB,SAASK,eAAT,CAAyBtV,CAAzB,EAA4BsK,CAA5B,EAA+B;AACxEtK,IAAAA,CAAC,CAACuV,SAAF,GAAcjL,CAAd;AACA,WAAOtK,CAAP;AACD,GAHD;;AAKA,SAAOsV,eAAe,CAACtV,CAAD,EAAIsK,CAAJ,CAAtB;AACD;;;;;;UCPD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D","sources":["webpack://@glowingblue/password-strength/../src/Feedback.ts","webpack://@glowingblue/password-strength/../src/Matching.ts","webpack://@glowingblue/password-strength/../src/Options.ts","webpack://@glowingblue/password-strength/../src/TimeEstimates.ts","webpack://@glowingblue/password-strength/../../src/data/const.ts","webpack://@glowingblue/password-strength/../../src/data/dateSplits.ts","webpack://@glowingblue/password-strength/../../src/data/l33tTable.ts","webpack://@glowingblue/password-strength/../../src/data/translationKeys.ts","webpack://@glowingblue/password-strength/../src/helper.ts","webpack://@glowingblue/password-strength/../src/index.ts","webpack://@glowingblue/password-strength/../../../src/matcher/bruteforce/feedback.ts","webpack://@glowingblue/password-strength/../../../src/matcher/bruteforce/scoring.ts","webpack://@glowingblue/password-strength/../../../src/matcher/date/feedback.ts","webpack://@glowingblue/password-strength/../../../src/matcher/date/matching.ts","webpack://@glowingblue/password-strength/../../../src/matcher/date/scoring.ts","webpack://@glowingblue/password-strength/../../../src/matcher/dictionary/feedback.ts","webpack://@glowingblue/password-strength/../../../src/matcher/dictionary/matching.ts","webpack://@glowingblue/password-strength/../../../src/matcher/dictionary/scoring.ts","webpack://@glowingblue/password-strength/../../../../../src/matcher/dictionary/variants/matching/l33t.ts","webpack://@glowingblue/password-strength/../../../../../src/matcher/dictionary/variants/matching/reverse.ts","webpack://@glowingblue/password-strength/../../../../../src/matcher/dictionary/variants/scoring/l33t.ts","webpack://@glowingblue/password-strength/../../../../../src/matcher/dictionary/variants/scoring/uppercase.ts","webpack://@glowingblue/password-strength/../../../src/matcher/regex/feedback.ts","webpack://@glowingblue/password-strength/../../../src/matcher/regex/matching.ts","webpack://@glowingblue/password-strength/../../../src/matcher/regex/scoring.ts","webpack://@glowingblue/password-strength/../../../src/matcher/repeat/feedback.ts","webpack://@glowingblue/password-strength/../../../src/matcher/repeat/matching.ts","webpack://@glowingblue/password-strength/../../../src/matcher/repeat/scoring.ts","webpack://@glowingblue/password-strength/../../../src/matcher/sequence/feedback.ts","webpack://@glowingblue/password-strength/../../../src/matcher/sequence/matching.ts","webpack://@glowingblue/password-strength/../../../src/matcher/sequence/scoring.ts","webpack://@glowingblue/password-strength/../../../src/matcher/spatial/feedback.ts","webpack://@glowingblue/password-strength/../../../src/matcher/spatial/matching.ts","webpack://@glowingblue/password-strength/../../../src/matcher/spatial/scoring.ts","webpack://@glowingblue/password-strength/../../src/scoring/estimate.ts","webpack://@glowingblue/password-strength/../../src/scoring/index.ts","webpack://@glowingblue/password-strength/../../src/scoring/utils.ts","webpack://@glowingblue/password-strength/./src/common/index.js","webpack://@glowingblue/password-strength/./src/forum/components/EyeButton.js","webpack://@glowingblue/password-strength/./src/forum/components/LogInPasswordField.js","webpack://@glowingblue/password-strength/./src/forum/components/SignUpPasswordField.js","webpack://@glowingblue/password-strength/./src/forum/components/StrengthIndicator.js","webpack://@glowingblue/password-strength/./src/forum/index.js","webpack://@glowingblue/password-strength/external root \"flarum.core.compat['common/Component']\"","webpack://@glowingblue/password-strength/external root \"flarum.core.compat['common/app']\"","webpack://@glowingblue/password-strength/external root \"flarum.core.compat['common/extend']\"","webpack://@glowingblue/password-strength/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@glowingblue/password-strength/external root \"flarum.core.compat['common/utils/Stream']\"","webpack://@glowingblue/password-strength/external root \"flarum.core.compat['common/utils/extractText']\"","webpack://@glowingblue/password-strength/external root \"flarum.core.compat['forum/components/LogInModal']\"","webpack://@glowingblue/password-strength/external root \"flarum.core.compat['forum/components/SignUpModal']\"","webpack://@glowingblue/password-strength/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@glowingblue/password-strength/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@glowingblue/password-strength/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@glowingblue/password-strength/webpack/bootstrap","webpack://@glowingblue/password-strength/webpack/runtime/compat get default export","webpack://@glowingblue/password-strength/webpack/runtime/define property getters","webpack://@glowingblue/password-strength/webpack/runtime/hasOwnProperty shorthand","webpack://@glowingblue/password-strength/webpack/runtime/make namespace object","webpack://@glowingblue/password-strength/./forum.js"],"sourcesContent":["import Options from './Options.esm.js';\nimport bruteforceMatcher from './matcher/bruteforce/feedback.esm.js';\nimport dateMatcher from './matcher/date/feedback.esm.js';\nimport dictionaryMatcher from './matcher/dictionary/feedback.esm.js';\nimport regexMatcher from './matcher/regex/feedback.esm.js';\nimport repeatMatcher from './matcher/repeat/feedback.esm.js';\nimport sequenceMatcher from './matcher/sequence/feedback.esm.js';\nimport spatialMatcher from './matcher/spatial/feedback.esm.js';\n\nconst defaultFeedback = {\n  warning: '',\n  suggestions: []\n};\n/*\n * -------------------------------------------------------------------------------\n *  Generate feedback ---------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\n\nclass Feedback {\n  constructor() {\n    this.matchers = {\n      bruteforce: bruteforceMatcher,\n      date: dateMatcher,\n      dictionary: dictionaryMatcher,\n      regex: regexMatcher,\n      repeat: repeatMatcher,\n      sequence: sequenceMatcher,\n      spatial: spatialMatcher\n    };\n    this.defaultFeedback = {\n      warning: '',\n      suggestions: []\n    };\n    this.setDefaultSuggestions();\n  }\n\n  setDefaultSuggestions() {\n    this.defaultFeedback.suggestions.push(Options.translations.suggestions.useWords, Options.translations.suggestions.noNeed);\n  }\n\n  getFeedback(score, sequence) {\n    if (sequence.length === 0) {\n      return this.defaultFeedback;\n    }\n\n    if (score > 2) {\n      return defaultFeedback;\n    }\n\n    const extraFeedback = Options.translations.suggestions.anotherWord;\n    const longestMatch = this.getLongestMatch(sequence);\n    let feedback = this.getMatchFeedback(longestMatch, sequence.length === 1);\n\n    if (feedback !== null && feedback !== undefined) {\n      feedback.suggestions.unshift(extraFeedback);\n\n      if (feedback.warning == null) {\n        feedback.warning = '';\n      }\n    } else {\n      feedback = {\n        warning: '',\n        suggestions: [extraFeedback]\n      };\n    }\n\n    return feedback;\n  }\n\n  getLongestMatch(sequence) {\n    let longestMatch = sequence[0];\n    const slicedSequence = sequence.slice(1);\n    slicedSequence.forEach(match => {\n      if (match.token.length > longestMatch.token.length) {\n        longestMatch = match;\n      }\n    });\n    return longestMatch;\n  }\n\n  getMatchFeedback(match, isSoleMatch) {\n    if (this.matchers[match.pattern]) {\n      return this.matchers[match.pattern](match, isSoleMatch);\n    }\n\n    if (Options.matchers[match.pattern] && 'feedback' in Options.matchers[match.pattern]) {\n      return Options.matchers[match.pattern].feedback(match, isSoleMatch);\n    }\n\n    return defaultFeedback;\n  }\n\n}\n\nexport { Feedback as default };\n//# sourceMappingURL=Feedback.esm.js.map\n","import { extend, sorted } from './helper.esm.js';\nimport MatchDate from './matcher/date/matching.esm.js';\nimport MatchDictionary from './matcher/dictionary/matching.esm.js';\nimport MatchRegex from './matcher/regex/matching.esm.js';\nimport MatchRepeat from './matcher/repeat/matching.esm.js';\nimport MatchSequence from './matcher/sequence/matching.esm.js';\nimport MatchSpatial from './matcher/spatial/matching.esm.js';\nimport Options from './Options.esm.js';\n\nclass Matching {\n  constructor() {\n    this.matchers = {\n      date: MatchDate,\n      dictionary: MatchDictionary,\n      regex: MatchRegex,\n      // @ts-ignore => TODO resolve this type issue. This is because it is possible to be async\n      repeat: MatchRepeat,\n      sequence: MatchSequence,\n      spatial: MatchSpatial\n    };\n  }\n\n  match(password) {\n    const matches = [];\n    const promises = [];\n    const matchers = [...Object.keys(this.matchers), ...Object.keys(Options.matchers)];\n    matchers.forEach(key => {\n      if (!this.matchers[key] && !Options.matchers[key]) {\n        return;\n      }\n\n      const Matcher = this.matchers[key] ? this.matchers[key] : Options.matchers[key].Matching;\n      const usedMatcher = new Matcher();\n      const result = usedMatcher.match({\n        password,\n        omniMatch: this\n      });\n\n      if (result instanceof Promise) {\n        result.then(response => {\n          extend(matches, response);\n        });\n        promises.push(result);\n      } else {\n        extend(matches, result);\n      }\n    });\n\n    if (promises.length > 0) {\n      return new Promise(resolve => {\n        Promise.all(promises).then(() => {\n          resolve(sorted(matches));\n        });\n      });\n    }\n\n    return sorted(matches);\n  }\n\n}\n\nexport { Matching as default };\n//# sourceMappingURL=Matching.esm.js.map\n","import { buildRankedDictionary } from './helper.esm.js';\nimport l33tTable from './data/l33tTable.esm.js';\nimport translationKeys from './data/translationKeys.esm.js';\n\nclass Options {\n  constructor() {\n    this.matchers = {};\n    this.l33tTable = l33tTable;\n    this.dictionary = {\n      userInputs: []\n    };\n    this.rankedDictionaries = {};\n    this.translations = translationKeys;\n    this.graphs = {};\n    this.availableGraphs = [];\n    this.setRankedDictionaries();\n  }\n\n  setOptions(options = {}) {\n    if (options.l33tTable) {\n      this.l33tTable = options.l33tTable;\n    }\n\n    if (options.dictionary) {\n      this.dictionary = options.dictionary;\n      this.setRankedDictionaries();\n    }\n\n    if (options.translations) {\n      this.setTranslations(options.translations);\n    }\n\n    if (options.graphs) {\n      this.graphs = options.graphs;\n    }\n  }\n\n  setTranslations(translations) {\n    if (this.checkCustomTranslations(translations)) {\n      this.translations = translations;\n    } else {\n      throw new Error('Invalid translations object fallback to keys');\n    }\n  }\n\n  checkCustomTranslations(translations) {\n    let valid = true;\n    Object.keys(translationKeys).forEach(type => {\n      if (type in translations) {\n        const translationType = type;\n        Object.keys(translationKeys[translationType]).forEach(key => {\n          if (!(key in translations[translationType])) {\n            valid = false;\n          }\n        });\n      } else {\n        valid = false;\n      }\n    });\n    return valid;\n  }\n\n  setRankedDictionaries() {\n    const rankedDictionaries = {};\n    Object.keys(this.dictionary).forEach(name => {\n      rankedDictionaries[name] = this.getRankedDictionary(name);\n    });\n    this.rankedDictionaries = rankedDictionaries;\n  }\n\n  getRankedDictionary(name) {\n    const list = this.dictionary[name];\n\n    if (name === 'userInputs') {\n      const sanitizedInputs = [];\n      list.forEach(input => {\n        const inputType = typeof input;\n\n        if (inputType === 'string' || inputType === 'number' || inputType === 'boolean') {\n          sanitizedInputs.push(input.toString().toLowerCase());\n        }\n      });\n      return buildRankedDictionary(sanitizedInputs);\n    }\n\n    return buildRankedDictionary(list);\n  }\n\n  extendUserInputsDictionary(dictionary) {\n    if (this.dictionary.userInputs) {\n      this.dictionary.userInputs = [...this.dictionary.userInputs, ...dictionary];\n    } else {\n      this.dictionary.userInputs = dictionary;\n    }\n\n    this.rankedDictionaries.userInputs = this.getRankedDictionary('userInputs');\n  }\n\n  addMatcher(name, matcher) {\n    if (this.matchers[name]) {\n      console.info('Matcher already exists');\n    } else {\n      this.matchers[name] = matcher;\n    }\n  }\n\n}\n\nvar Options$1 = new Options();\n\nexport { Options$1 as default };\n//# sourceMappingURL=Options.esm.js.map\n","import Options from './Options.esm.js';\n\nconst SECOND = 1;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst MONTH = DAY * 31;\nconst YEAR = MONTH * 12;\nconst CENTURY = YEAR * 100;\nconst times = {\n  second: SECOND,\n  minute: MINUTE,\n  hour: HOUR,\n  day: DAY,\n  month: MONTH,\n  year: YEAR,\n  century: CENTURY\n};\n/*\n * -------------------------------------------------------------------------------\n *  Estimates time for an attacker ---------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\n\nclass TimeEstimates {\n  translate(displayStr, value) {\n    let key = displayStr;\n\n    if (value !== undefined && value !== 1) {\n      key += 's';\n    }\n\n    const {\n      timeEstimation\n    } = Options.translations;\n    return timeEstimation[key].replace('{base}', `${value}`);\n  }\n\n  estimateAttackTimes(guesses) {\n    const crackTimesSeconds = {\n      onlineThrottling100PerHour: guesses / (100 / 3600),\n      onlineNoThrottling10PerSecond: guesses / 10,\n      offlineSlowHashing1e4PerSecond: guesses / 1e4,\n      offlineFastHashing1e10PerSecond: guesses / 1e10\n    };\n    const crackTimesDisplay = {\n      onlineThrottling100PerHour: '',\n      onlineNoThrottling10PerSecond: '',\n      offlineSlowHashing1e4PerSecond: '',\n      offlineFastHashing1e10PerSecond: ''\n    };\n    Object.keys(crackTimesSeconds).forEach(scenario => {\n      const seconds = crackTimesSeconds[scenario];\n      crackTimesDisplay[scenario] = this.displayTime(seconds);\n    });\n    return {\n      crackTimesSeconds,\n      crackTimesDisplay,\n      score: this.guessesToScore(guesses)\n    };\n  }\n\n  guessesToScore(guesses) {\n    const DELTA = 5;\n\n    if (guesses < 1e3 + DELTA) {\n      // risky password: \"too guessable\"\n      return 0;\n    }\n\n    if (guesses < 1e6 + DELTA) {\n      // modest protection from throttled online attacks: \"very guessable\"\n      return 1;\n    }\n\n    if (guesses < 1e8 + DELTA) {\n      // modest protection from unthrottled online attacks: \"somewhat guessable\"\n      return 2;\n    }\n\n    if (guesses < 1e10 + DELTA) {\n      // modest protection from offline attacks: \"safely unguessable\"\n      // assuming a salted, slow hash function like bcrypt, scrypt, PBKDF2, argon, etc\n      return 3;\n    } // strong protection from offline attacks under same scenario: \"very unguessable\"\n\n\n    return 4;\n  }\n\n  displayTime(seconds) {\n    let displayStr = 'centuries';\n    let base;\n    const timeKeys = Object.keys(times);\n    const foundIndex = timeKeys.findIndex(time => seconds < times[time]);\n\n    if (foundIndex > -1) {\n      displayStr = timeKeys[foundIndex - 1];\n\n      if (foundIndex !== 0) {\n        base = Math.round(seconds / times[displayStr]);\n      } else {\n        displayStr = 'ltSecond';\n      }\n    }\n\n    return this.translate(displayStr, base);\n  }\n\n}\n\nexport { TimeEstimates as default };\n//# sourceMappingURL=TimeEstimates.esm.js.map\n","import dateSplits from './dateSplits.esm.js';\n\nconst DATE_MAX_YEAR = 2050;\nconst DATE_MIN_YEAR = 1000;\nconst DATE_SPLITS = dateSplits;\nconst BRUTEFORCE_CARDINALITY = 10;\nconst MIN_GUESSES_BEFORE_GROWING_SEQUENCE = 10000;\nconst MIN_SUBMATCH_GUESSES_SINGLE_CHAR = 10;\nconst MIN_SUBMATCH_GUESSES_MULTI_CHAR = 50;\nconst MIN_YEAR_SPACE = 20; // \\xbf-\\xdf is a range for almost all special uppercase letter like Ä and so on\n\nconst START_UPPER = /^[A-Z\\xbf-\\xdf][^A-Z\\xbf-\\xdf]+$/;\nconst END_UPPER = /^[^A-Z\\xbf-\\xdf]+[A-Z\\xbf-\\xdf]$/; // \\xdf-\\xff is a range for almost all special lowercase letter like ä and so on\n\nconst ALL_UPPER = /^[A-Z\\xbf-\\xdf]+$/;\nconst ALL_UPPER_INVERTED = /^[^a-z\\xdf-\\xff]+$/;\nconst ALL_LOWER = /^[a-z\\xdf-\\xff]+$/;\nconst ALL_LOWER_INVERTED = /^[^A-Z\\xbf-\\xdf]+$/;\nconst ONE_UPPER = /[a-z\\xdf-\\xff]/;\nconst ONE_LOWER = /[A-Z\\xbf-\\xdf]/;\nconst ALPHA_INVERTED = /[^A-Za-z\\xbf-\\xdf]/gi;\nconst ALL_DIGIT = /^\\d+$/;\nconst REFERENCE_YEAR = new Date().getFullYear();\nconst REGEXEN = {\n  recentYear: /19\\d\\d|200\\d|201\\d|202\\d/g\n};\n\nexport { ALL_DIGIT, ALL_LOWER, ALL_LOWER_INVERTED, ALL_UPPER, ALL_UPPER_INVERTED, ALPHA_INVERTED, BRUTEFORCE_CARDINALITY, DATE_MAX_YEAR, DATE_MIN_YEAR, DATE_SPLITS, END_UPPER, MIN_GUESSES_BEFORE_GROWING_SEQUENCE, MIN_SUBMATCH_GUESSES_MULTI_CHAR, MIN_SUBMATCH_GUESSES_SINGLE_CHAR, MIN_YEAR_SPACE, ONE_LOWER, ONE_UPPER, REFERENCE_YEAR, REGEXEN, START_UPPER };\n//# sourceMappingURL=const.esm.js.map\n","var dateSplits = {\n  4: [[1, 2], [2, 3]],\n  5: [[1, 3], [2, 3]],\n  6: [[1, 2], [2, 4], [4, 5]],\n  7: [[1, 3], [2, 3], [4, 5], [4, 6]],\n  8: [[2, 4], [4, 6]]\n};\n\nexport { dateSplits as default };\n//# sourceMappingURL=dateSplits.esm.js.map\n","var l33tTable = {\n  a: ['4', '@'],\n  b: ['8'],\n  c: ['(', '{', '[', '<'],\n  e: ['3'],\n  g: ['6', '9'],\n  i: ['1', '!', '|'],\n  l: ['1', '|', '7'],\n  o: ['0'],\n  s: ['$', '5'],\n  t: ['+', '7'],\n  x: ['%'],\n  z: ['2']\n};\n\nexport { l33tTable as default };\n//# sourceMappingURL=l33tTable.esm.js.map\n","var translationKeys = {\n  warnings: {\n    straightRow: 'straightRow',\n    keyPattern: 'keyPattern',\n    simpleRepeat: 'simpleRepeat',\n    extendedRepeat: 'extendedRepeat',\n    sequences: 'sequences',\n    recentYears: 'recentYears',\n    dates: 'dates',\n    topTen: 'topTen',\n    topHundred: 'topHundred',\n    common: 'common',\n    similarToCommon: 'similarToCommon',\n    wordByItself: 'wordByItself',\n    namesByThemselves: 'namesByThemselves',\n    commonNames: 'commonNames',\n    userInputs: 'userInputs'\n  },\n  suggestions: {\n    l33t: 'l33t',\n    reverseWords: 'reverseWords',\n    allUppercase: 'allUppercase',\n    capitalization: 'capitalization',\n    dates: 'dates',\n    recentYears: 'recentYears',\n    associatedYears: 'associatedYears',\n    sequences: 'sequences',\n    repeated: 'repeated',\n    longerKeyboardPattern: 'longerKeyboardPattern',\n    anotherWord: 'anotherWord',\n    useWords: 'useWords',\n    noNeed: 'noNeed'\n  },\n  timeEstimation: {\n    ltSecond: 'ltSecond',\n    second: 'second',\n    seconds: 'seconds',\n    minute: 'minute',\n    minutes: 'minutes',\n    hour: 'hour',\n    hours: 'hours',\n    day: 'day',\n    days: 'days',\n    month: 'month',\n    months: 'months',\n    year: 'year',\n    years: 'years',\n    centuries: 'centuries'\n  }\n};\n\nexport { translationKeys as default };\n//# sourceMappingURL=translationKeys.esm.js.map\n","const empty = obj => Object.keys(obj).length === 0;\nconst extend = (listToExtend, list) => // eslint-disable-next-line prefer-spread\nlistToExtend.push.apply(listToExtend, list);\nconst translate = (string, chrMap) => {\n  const tempArray = string.split('');\n  return tempArray.map(char => chrMap[char] || char).join('');\n}; // mod implementation that works for negative numbers\n\nconst sorted = matches => matches.sort((m1, m2) => m1.i - m2.i || m1.j - m2.j);\nconst buildRankedDictionary = orderedList => {\n  const result = {};\n  let counter = 1; // rank starts at 1, not 0\n\n  orderedList.forEach(word => {\n    result[word] = counter;\n    counter += 1;\n  });\n  return result;\n};\n\nexport { buildRankedDictionary, empty, extend, sorted, translate };\n//# sourceMappingURL=helper.esm.js.map\n","import Matching from './Matching.esm.js';\nimport scoring from './scoring/index.esm.js';\nimport TimeEstimates from './TimeEstimates.esm.js';\nimport Feedback from './Feedback.esm.js';\nimport Options from './Options.esm.js';\nexport { default as ZxcvbnOptions } from './Options.esm.js';\n\nconst time = () => new Date().getTime();\n\nconst createReturnValue = (resolvedMatches, password, start) => {\n  const feedback = new Feedback();\n  const timeEstimates = new TimeEstimates();\n  const matchSequence = scoring.mostGuessableMatchSequence(password, resolvedMatches);\n  const calcTime = time() - start;\n  const attackTimes = timeEstimates.estimateAttackTimes(matchSequence.guesses);\n  return {\n    calcTime,\n    ...matchSequence,\n    ...attackTimes,\n    feedback: feedback.getFeedback(attackTimes.score, matchSequence.sequence)\n  };\n};\n\nconst zxcvbn = (password, userInputs) => {\n  if (userInputs) {\n    Options.extendUserInputsDictionary(userInputs);\n  }\n\n  const matching = new Matching();\n  const start = time();\n  const matches = matching.match(password);\n\n  if (matches instanceof Promise) {\n    return matches.then(resolvedMatches => {\n      return createReturnValue(resolvedMatches, password, start);\n    });\n  }\n\n  return createReturnValue(matches, password, start);\n};\n\nexport { zxcvbn };\n//# sourceMappingURL=index.esm.js.map\n","var bruteforceMatcher = (() => {\n  return null;\n});\n\nexport { bruteforceMatcher as default };\n//# sourceMappingURL=feedback.esm.js.map\n","import { BRUTEFORCE_CARDINALITY, MIN_SUBMATCH_GUESSES_SINGLE_CHAR, MIN_SUBMATCH_GUESSES_MULTI_CHAR } from '../../data/const.esm.js';\n\nvar bruteforceMatcher = (({\n  token\n}) => {\n  let guesses = BRUTEFORCE_CARDINALITY ** token.length;\n\n  if (guesses === Number.POSITIVE_INFINITY) {\n    guesses = Number.MAX_VALUE;\n  }\n\n  let minGuesses; // small detail: make bruteforce matches at minimum one guess bigger than smallest allowed\n  // submatch guesses, such that non-bruteforce submatches over the same [i..j] take precedence.\n\n  if (token.length === 1) {\n    minGuesses = MIN_SUBMATCH_GUESSES_SINGLE_CHAR + 1;\n  } else {\n    minGuesses = MIN_SUBMATCH_GUESSES_MULTI_CHAR + 1;\n  }\n\n  return Math.max(guesses, minGuesses);\n});\n\nexport { bruteforceMatcher as default };\n//# sourceMappingURL=scoring.esm.js.map\n","import Options from '../../Options.esm.js';\n\nvar dateMatcher = (() => {\n  return {\n    warning: Options.translations.warnings.dates,\n    suggestions: [Options.translations.suggestions.dates]\n  };\n});\n\nexport { dateMatcher as default };\n//# sourceMappingURL=feedback.esm.js.map\n","import { REFERENCE_YEAR, DATE_MIN_YEAR, DATE_MAX_YEAR, DATE_SPLITS } from '../../data/const.esm.js';\nimport { sorted } from '../../helper.esm.js';\n\n/*\n * -------------------------------------------------------------------------------\n *  date matching ----------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\n\nclass MatchDate {\n  /*\n   * a \"date\" is recognized as:\n   *   any 3-tuple that starts or ends with a 2- or 4-digit year,\n   *   with 2 or 0 separator chars (1.1.91 or 1191),\n   *   maybe zero-padded (01-01-91 vs 1-1-91),\n   *   a month between 1 and 12,\n   *   a day between 1 and 31.\n   *\n   * note: this isn't true date parsing in that \"feb 31st\" is allowed,\n   * this doesn't check for leap years, etc.\n   *\n   * recipe:\n   * start with regex to find maybe-dates, then attempt to map the integers\n   * onto month-day-year to filter the maybe-dates into dates.\n   * finally, remove matches that are substrings of other matches to reduce noise.\n   *\n   * note: instead of using a lazy or greedy regex to find many dates over the full string,\n   * this uses a ^...$ regex against every substring of the password -- less performant but leads\n   * to every possible date match.\n   */\n  match({\n    password\n  }) {\n    const matches = [...this.getMatchesWithoutSeparator(password), ...this.getMatchesWithSeparator(password)];\n    const filteredMatches = this.filterNoise(matches);\n    return sorted(filteredMatches);\n  }\n\n  getMatchesWithSeparator(password) {\n    const matches = [];\n    const maybeDateWithSeparator = /^(\\d{1,4})([\\s/\\\\_.-])(\\d{1,2})\\2(\\d{1,4})$/; // # dates with separators are between length 6 '1/1/91' and 10 '11/11/1991'\n\n    for (let i = 0; i <= Math.abs(password.length - 6); i += 1) {\n      for (let j = i + 5; j <= i + 9; j += 1) {\n        if (j >= password.length) {\n          break;\n        }\n\n        const token = password.slice(i, +j + 1 || 9e9);\n        const regexMatch = maybeDateWithSeparator.exec(token);\n\n        if (regexMatch != null) {\n          const dmy = this.mapIntegersToDayMonthYear([parseInt(regexMatch[1], 10), parseInt(regexMatch[3], 10), parseInt(regexMatch[4], 10)]);\n\n          if (dmy != null) {\n            matches.push({\n              pattern: 'date',\n              token,\n              i,\n              j,\n              separator: regexMatch[2],\n              year: dmy.year,\n              month: dmy.month,\n              day: dmy.day\n            });\n          }\n        }\n      }\n    }\n\n    return matches;\n  } // eslint-disable-next-line max-statements\n\n\n  getMatchesWithoutSeparator(password) {\n    const matches = [];\n    const maybeDateNoSeparator = /^\\d{4,8}$/;\n\n    const metric = candidate => Math.abs(candidate.year - REFERENCE_YEAR); // # dates without separators are between length 4 '1191' and 8 '11111991'\n\n\n    for (let i = 0; i <= Math.abs(password.length - 4); i += 1) {\n      for (let j = i + 3; j <= i + 7; j += 1) {\n        if (j >= password.length) {\n          break;\n        }\n\n        const token = password.slice(i, +j + 1 || 9e9);\n\n        if (maybeDateNoSeparator.exec(token)) {\n          const candidates = [];\n          const index = token.length;\n          const splittedDates = DATE_SPLITS[index];\n          splittedDates.forEach(([k, l]) => {\n            const dmy = this.mapIntegersToDayMonthYear([parseInt(token.slice(0, k), 10), parseInt(token.slice(k, l), 10), parseInt(token.slice(l), 10)]);\n\n            if (dmy != null) {\n              candidates.push(dmy);\n            }\n          });\n\n          if (candidates.length > 0) {\n            /*\n             * at this point: different possible dmy mappings for the same i,j substring.\n             * match the candidate date that likely takes the fewest guesses: a year closest\n             * to 2000.\n             * (scoring.REFERENCE_YEAR).\n             *\n             * ie, considering '111504', prefer 11-15-04 to 1-1-1504\n             * (interpreting '04' as 2004)\n             */\n            let bestCandidate = candidates[0];\n            let minDistance = metric(candidates[0]);\n            candidates.slice(1).forEach(candidate => {\n              const distance = metric(candidate);\n\n              if (distance < minDistance) {\n                bestCandidate = candidate;\n                minDistance = distance;\n              }\n            });\n            matches.push({\n              pattern: 'date',\n              token,\n              i,\n              j,\n              separator: '',\n              year: bestCandidate.year,\n              month: bestCandidate.month,\n              day: bestCandidate.day\n            });\n          }\n        }\n      }\n    }\n\n    return matches;\n  }\n  /*\n   * matches now contains all valid date strings in a way that is tricky to capture\n   * with regexes only. while thorough, it will contain some unintuitive noise:\n   *\n   * '2015_06_04', in addition to matching 2015_06_04, will also contain\n   * 5(!) other date matches: 15_06_04, 5_06_04, ..., even 2015 (matched as 5/1/2020)\n   *\n   * to reduce noise, remove date matches that are strict substrings of others\n   */\n\n\n  filterNoise(matches) {\n    return matches.filter(match => {\n      let isSubmatch = false;\n      const matchesLength = matches.length;\n\n      for (let o = 0; o < matchesLength; o += 1) {\n        const otherMatch = matches[o];\n\n        if (match !== otherMatch) {\n          if (otherMatch.i <= match.i && otherMatch.j >= match.j) {\n            isSubmatch = true;\n            break;\n          }\n        }\n      }\n\n      return !isSubmatch;\n    });\n  }\n  /*\n   * given a 3-tuple, discard if:\n   *   middle int is over 31 (for all dmy formats, years are never allowed in the middle)\n   *   middle int is zero\n   *   any int is over the max allowable year\n   *   any int is over two digits but under the min allowable year\n   *   2 integers are over 31, the max allowable day\n   *   2 integers are zero\n   *   all integers are over 12, the max allowable month\n   */\n  // eslint-disable-next-line complexity, max-statements\n\n\n  mapIntegersToDayMonthYear(integers) {\n    if (integers[1] > 31 || integers[1] <= 0) {\n      return null;\n    }\n\n    let over12 = 0;\n    let over31 = 0;\n    let under1 = 0;\n\n    for (let o = 0, len1 = integers.length; o < len1; o += 1) {\n      const int = integers[o];\n\n      if (int > 99 && int < DATE_MIN_YEAR || int > DATE_MAX_YEAR) {\n        return null;\n      }\n\n      if (int > 31) {\n        over31 += 1;\n      }\n\n      if (int > 12) {\n        over12 += 1;\n      }\n\n      if (int <= 0) {\n        under1 += 1;\n      }\n    }\n\n    if (over31 >= 2 || over12 === 3 || under1 >= 2) {\n      return null;\n    }\n\n    return this.getDayMonth(integers);\n  } // eslint-disable-next-line max-statements\n\n\n  getDayMonth(integers) {\n    // first look for a four digit year: yyyy + daymonth or daymonth + yyyy\n    const possibleYearSplits = [[integers[2], integers.slice(0, 2)], [integers[0], integers.slice(1, 3)] // year first\n    ];\n    const possibleYearSplitsLength = possibleYearSplits.length;\n\n    for (let j = 0; j < possibleYearSplitsLength; j += 1) {\n      const [y, rest] = possibleYearSplits[j];\n\n      if (DATE_MIN_YEAR <= y && y <= DATE_MAX_YEAR) {\n        const dm = this.mapIntegersToDayMonth(rest);\n\n        if (dm != null) {\n          return {\n            year: y,\n            month: dm.month,\n            day: dm.day\n          };\n        }\n        /*\n         * for a candidate that includes a four-digit year,\n         * when the remaining integers don't match to a day and month,\n         * it is not a date.\n         */\n\n\n        return null;\n      }\n    } // given no four-digit year, two digit years are the most flexible int to match, so\n    // try to parse a day-month out of integers[0..1] or integers[1..0]\n\n\n    for (let k = 0; k < possibleYearSplitsLength; k += 1) {\n      const [y, rest] = possibleYearSplits[k];\n      const dm = this.mapIntegersToDayMonth(rest);\n\n      if (dm != null) {\n        return {\n          year: this.twoToFourDigitYear(y),\n          month: dm.month,\n          day: dm.day\n        };\n      }\n    }\n\n    return null;\n  }\n\n  mapIntegersToDayMonth(integers) {\n    const temp = [integers, integers.slice().reverse()];\n\n    for (let i = 0; i < temp.length; i += 1) {\n      const data = temp[i];\n      const day = data[0];\n      const month = data[1];\n\n      if (day >= 1 && day <= 31 && month >= 1 && month <= 12) {\n        return {\n          day,\n          month\n        };\n      }\n    }\n\n    return null;\n  }\n\n  twoToFourDigitYear(year) {\n    if (year > 99) {\n      return year;\n    }\n\n    if (year > 50) {\n      // 87 -> 1987\n      return year + 1900;\n    } // 15 -> 2015\n\n\n    return year + 2000;\n  }\n\n}\n\nexport { MatchDate as default };\n//# sourceMappingURL=matching.esm.js.map\n","import { REFERENCE_YEAR, MIN_YEAR_SPACE } from '../../data/const.esm.js';\n\nvar dateMatcher = (({\n  year,\n  separator\n}) => {\n  // base guesses: (year distance from REFERENCE_YEAR) * num_days * num_years\n  const yearSpace = Math.max(Math.abs(year - REFERENCE_YEAR), MIN_YEAR_SPACE);\n  let guesses = yearSpace * 365; // add factor of 4 for separator selection (one of ~4 choices)\n\n  if (separator) {\n    guesses *= 4;\n  }\n\n  return guesses;\n});\n\nexport { dateMatcher as default };\n//# sourceMappingURL=scoring.esm.js.map\n","import Options from '../../Options.esm.js';\nimport { START_UPPER, ALL_UPPER_INVERTED } from '../../data/const.esm.js';\n\nconst getDictionaryWarningPassword = (match, isSoleMatch) => {\n  let warning = '';\n\n  if (isSoleMatch && !match.l33t && !match.reversed) {\n    if (match.rank <= 10) {\n      warning = Options.translations.warnings.topTen;\n    } else if (match.rank <= 100) {\n      warning = Options.translations.warnings.topHundred;\n    } else {\n      warning = Options.translations.warnings.common;\n    }\n  } else if (match.guessesLog10 <= 4) {\n    warning = Options.translations.warnings.similarToCommon;\n  }\n\n  return warning;\n};\n\nconst getDictionaryWarningWikipedia = (match, isSoleMatch) => {\n  let warning = '';\n\n  if (isSoleMatch) {\n    warning = Options.translations.warnings.wordByItself;\n  }\n\n  return warning;\n};\n\nconst getDictionaryWarningNames = (match, isSoleMatch) => {\n  if (isSoleMatch) {\n    return Options.translations.warnings.namesByThemselves;\n  }\n\n  return Options.translations.warnings.commonNames;\n};\n\nconst getDictionaryWarning = (match, isSoleMatch) => {\n  let warning = '';\n  const dictName = match.dictionaryName;\n  const isAName = dictName === 'lastnames' || dictName.toLowerCase().includes('firstnames');\n\n  if (dictName === 'passwords') {\n    warning = getDictionaryWarningPassword(match, isSoleMatch);\n  } else if (dictName.includes('wikipedia')) {\n    warning = getDictionaryWarningWikipedia(match, isSoleMatch);\n  } else if (isAName) {\n    warning = getDictionaryWarningNames(match, isSoleMatch);\n  } else if (dictName === 'userInputs') {\n    warning = Options.translations.warnings.userInputs;\n  }\n\n  return warning;\n};\n\nvar dictionaryMatcher = ((match, isSoleMatch) => {\n  const warning = getDictionaryWarning(match, isSoleMatch);\n  const suggestions = [];\n  const word = match.token;\n\n  if (word.match(START_UPPER)) {\n    suggestions.push(Options.translations.suggestions.capitalization);\n  } else if (word.match(ALL_UPPER_INVERTED) && word.toLowerCase() !== word) {\n    suggestions.push(Options.translations.suggestions.allUppercase);\n  }\n\n  if (match.reversed && match.token.length >= 4) {\n    suggestions.push(Options.translations.suggestions.reverseWords);\n  }\n\n  if (match.l33t) {\n    suggestions.push(Options.translations.suggestions.l33t);\n  }\n\n  return {\n    warning,\n    suggestions\n  };\n});\n\nexport { dictionaryMatcher as default };\n//# sourceMappingURL=feedback.esm.js.map\n","import { sorted } from '../../helper.esm.js';\nimport Options from '../../Options.esm.js';\nimport MatchL33t$1 from './variants/matching/reverse.esm.js';\nimport MatchL33t from './variants/matching/l33t.esm.js';\n\nclass MatchDictionary {\n  constructor() {\n    this.l33t = new MatchL33t(this.defaultMatch);\n    this.reverse = new MatchL33t$1(this.defaultMatch);\n  }\n\n  match({\n    password\n  }) {\n    const matches = [...this.defaultMatch({\n      password\n    }), ...this.reverse.match({\n      password\n    }), ...this.l33t.match({\n      password\n    })];\n    return sorted(matches);\n  }\n\n  defaultMatch({\n    password\n  }) {\n    // rankedDictionaries variable is for unit testing purposes\n    const matches = [];\n    const passwordLength = password.length;\n    const passwordLower = password.toLowerCase();\n    Object.keys(Options.rankedDictionaries).forEach(dictionaryName => {\n      const rankedDict = Options.rankedDictionaries[dictionaryName];\n\n      for (let i = 0; i < passwordLength; i += 1) {\n        for (let j = i; j < passwordLength; j += 1) {\n          if (passwordLower.slice(i, +j + 1 || 9e9) in rankedDict) {\n            const word = passwordLower.slice(i, +j + 1 || 9e9);\n            const rank = rankedDict[word];\n            matches.push({\n              pattern: 'dictionary',\n              i,\n              j,\n              token: password.slice(i, +j + 1 || 9e9),\n              matchedWord: word,\n              rank,\n              dictionaryName: dictionaryName,\n              reversed: false,\n              l33t: false\n            });\n          }\n        }\n      }\n    });\n    return matches;\n  }\n\n}\n\nexport { MatchDictionary as default };\n//# sourceMappingURL=matching.esm.js.map\n","import uppercaseVariant from './variants/scoring/uppercase.esm.js';\nimport l33tVariant from './variants/scoring/l33t.esm.js';\n\nvar dictionaryMatcher = (({\n  rank,\n  reversed,\n  l33t,\n  sub,\n  token\n}) => {\n  const baseGuesses = rank; // keep these as properties for display purposes\n\n  const uppercaseVariations = uppercaseVariant(token);\n  const l33tVariations = l33tVariant({\n    l33t,\n    sub,\n    token\n  });\n  const reversedVariations = reversed && 2 || 1;\n  const calculation = baseGuesses * uppercaseVariations * l33tVariations * reversedVariations;\n  return {\n    baseGuesses,\n    uppercaseVariations,\n    l33tVariations,\n    calculation\n  };\n});\n\nexport { dictionaryMatcher as default };\n//# sourceMappingURL=scoring.esm.js.map\n","import { empty, translate } from '../../../../helper.esm.js';\nimport Options from '../../../../Options.esm.js';\n\n/*\n * -------------------------------------------------------------------------------\n *  Dictionary l33t matching -----------------------------------------------------\n * -------------------------------------------------------------------------------\n */\n\nclass MatchL33t {\n  constructor(defaultMatch) {\n    this.defaultMatch = defaultMatch;\n  }\n\n  match({\n    password\n  }) {\n    const matches = [];\n    const enumeratedSubs = this.enumerateL33tSubs(this.relevantL33tSubtable(password, Options.l33tTable));\n\n    for (let i = 0; i < enumeratedSubs.length; i += 1) {\n      const sub = enumeratedSubs[i]; // corner case: password has no relevant subs.\n\n      if (empty(sub)) {\n        break;\n      }\n\n      const subbedPassword = translate(password, sub);\n      const matchedDictionary = this.defaultMatch({\n        password: subbedPassword\n      });\n      matchedDictionary.forEach(match => {\n        const token = password.slice(match.i, +match.j + 1 || 9e9); // only return the matches that contain an actual substitution\n\n        if (token.toLowerCase() !== match.matchedWord) {\n          // subset of mappings in sub that are in use for this match\n          const matchSub = {};\n          Object.keys(sub).forEach(subbedChr => {\n            const chr = sub[subbedChr];\n\n            if (token.indexOf(subbedChr) !== -1) {\n              matchSub[subbedChr] = chr;\n            }\n          });\n          const subDisplay = Object.keys(matchSub).map(k => `${k} -> ${matchSub[k]}`).join(', ');\n          matches.push({ ...match,\n            l33t: true,\n            token,\n            sub: matchSub,\n            subDisplay\n          });\n        }\n      });\n    } // filter single-character l33t matches to reduce noise.\n    // otherwise '1' matches 'i', '4' matches 'a', both very common English words\n    // with low dictionary rank.\n\n\n    return matches.filter(match => match.token.length > 1);\n  } // makes a pruned copy of l33t_table that only includes password's possible substitutions\n\n\n  relevantL33tSubtable(password, table) {\n    const passwordChars = {};\n    const subTable = {};\n    password.split('').forEach(char => {\n      passwordChars[char] = true;\n    });\n    Object.keys(table).forEach(letter => {\n      const subs = table[letter];\n      const relevantSubs = subs.filter(sub => sub in passwordChars);\n\n      if (relevantSubs.length > 0) {\n        subTable[letter] = relevantSubs;\n      }\n    });\n    return subTable;\n  } // returns the list of possible 1337 replacement dictionaries for a given password\n\n\n  enumerateL33tSubs(table) {\n    const tableKeys = Object.keys(table);\n    const subs = this.getSubs(tableKeys, [[]], table); // convert from assoc lists to dicts\n\n    return subs.map(sub => {\n      const subDict = {};\n      sub.forEach(([l33tChr, chr]) => {\n        subDict[l33tChr] = chr;\n      });\n      return subDict;\n    });\n  }\n\n  getSubs(keys, subs, table) {\n    if (!keys.length) {\n      return subs;\n    }\n\n    const firstKey = keys[0];\n    const restKeys = keys.slice(1);\n    const nextSubs = [];\n    table[firstKey].forEach(l33tChr => {\n      subs.forEach(sub => {\n        let dupL33tIndex = -1;\n\n        for (let i = 0; i < sub.length; i += 1) {\n          if (sub[i][0] === l33tChr) {\n            dupL33tIndex = i;\n            break;\n          }\n        }\n\n        if (dupL33tIndex === -1) {\n          const subExtension = sub.concat([[l33tChr, firstKey]]);\n          nextSubs.push(subExtension);\n        } else {\n          const subAlternative = sub.slice(0);\n          subAlternative.splice(dupL33tIndex, 1);\n          subAlternative.push([l33tChr, firstKey]);\n          nextSubs.push(sub);\n          nextSubs.push(subAlternative);\n        }\n      });\n    });\n    const newSubs = this.dedup(nextSubs);\n\n    if (restKeys.length) {\n      return this.getSubs(restKeys, newSubs, table);\n    }\n\n    return newSubs;\n  }\n\n  dedup(subs) {\n    const deduped = [];\n    const members = {};\n    subs.forEach(sub => {\n      const assoc = sub.map((k, index) => [k, index]);\n      assoc.sort();\n      const label = assoc.map(([k, v]) => `${k},${v}`).join('-');\n\n      if (!(label in members)) {\n        members[label] = true;\n        deduped.push(sub);\n      }\n    });\n    return deduped;\n  }\n\n}\n\nexport { MatchL33t as default };\n//# sourceMappingURL=l33t.esm.js.map\n","/*\n * -------------------------------------------------------------------------------\n *  Dictionary reverse matching --------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass MatchL33t {\n  constructor(defaultMatch) {\n    this.defaultMatch = defaultMatch;\n  }\n\n  match({\n    password\n  }) {\n    const passwordReversed = password.split('').reverse().join('');\n    return this.defaultMatch({\n      password: passwordReversed\n    }).map(match => ({ ...match,\n      token: match.token.split('').reverse().join(''),\n      reversed: true,\n      // map coordinates back to original string\n      i: password.length - 1 - match.j,\n      j: password.length - 1 - match.i\n    }));\n  }\n\n}\n\nexport { MatchL33t as default };\n//# sourceMappingURL=reverse.esm.js.map\n","import utils from '../../../../scoring/utils.esm.js';\n\nconst getCounts = ({\n  subs,\n  subbed,\n  token\n}) => {\n  const unsubbed = subs[subbed]; // lower-case match.token before calculating: capitalization shouldn't affect l33t calc.\n\n  const chrs = token.toLowerCase().split(''); // num of subbed chars\n\n  const subbedCount = chrs.filter(char => char === subbed).length; // num of unsubbed chars\n\n  const unsubbedCount = chrs.filter(char => char === unsubbed).length;\n  return {\n    subbedCount,\n    unsubbedCount\n  };\n};\n\nvar l33tVariant = (({\n  l33t,\n  sub,\n  token\n}) => {\n  if (!l33t) {\n    return 1;\n  }\n\n  let variations = 1;\n  const subs = sub;\n  Object.keys(subs).forEach(subbed => {\n    const {\n      subbedCount,\n      unsubbedCount\n    } = getCounts({\n      subs,\n      subbed,\n      token\n    });\n\n    if (subbedCount === 0 || unsubbedCount === 0) {\n      // for this sub, password is either fully subbed (444) or fully unsubbed (aaa)\n      // treat that as doubling the space (attacker needs to try fully subbed chars in addition to\n      // unsubbed.)\n      variations *= 2;\n    } else {\n      // this case is similar to capitalization:\n      // with aa44a, U = 3, S = 2, attacker needs to try unsubbed + one sub + two subs\n      const p = Math.min(unsubbedCount, subbedCount);\n      let possibilities = 0;\n\n      for (let i = 1; i <= p; i += 1) {\n        possibilities += utils.nCk(unsubbedCount + subbedCount, i);\n      }\n\n      variations *= possibilities;\n    }\n  });\n  return variations;\n});\n\nexport { l33tVariant as default };\n//# sourceMappingURL=l33t.esm.js.map\n","import utils from '../../../../scoring/utils.esm.js';\nimport { ALPHA_INVERTED, ALL_LOWER_INVERTED, ONE_UPPER, ONE_LOWER, START_UPPER, END_UPPER, ALL_UPPER_INVERTED } from '../../../../data/const.esm.js';\n\nconst getVariations = cleanedWord => {\n  const wordArray = cleanedWord.split('');\n  const upperCaseCount = wordArray.filter(char => char.match(ONE_UPPER)).length;\n  const lowerCaseCount = wordArray.filter(char => char.match(ONE_LOWER)).length;\n  let variations = 0;\n  const variationLength = Math.min(upperCaseCount, lowerCaseCount);\n\n  for (let i = 1; i <= variationLength; i += 1) {\n    variations += utils.nCk(upperCaseCount + lowerCaseCount, i);\n  }\n\n  return variations;\n};\n\nvar uppercaseVariant = (word => {\n  // clean words of non alpha characters to remove the reward effekt to capitalize the first letter https://github.com/dropbox/zxcvbn/issues/232\n  const cleanedWord = word.replace(ALPHA_INVERTED, '');\n\n  if (cleanedWord.match(ALL_LOWER_INVERTED) || cleanedWord.toLowerCase() === cleanedWord) {\n    return 1;\n  } // a capitalized word is the most common capitalization scheme,\n  // so it only doubles the search space (uncapitalized + capitalized).\n  // all caps and end-capitalized are common enough too, underestimate as 2x factor to be safe.\n\n\n  const commonCases = [START_UPPER, END_UPPER, ALL_UPPER_INVERTED];\n  const commonCasesLength = commonCases.length;\n\n  for (let i = 0; i < commonCasesLength; i += 1) {\n    const regex = commonCases[i];\n\n    if (cleanedWord.match(regex)) {\n      return 2;\n    }\n  } // otherwise calculate the number of ways to capitalize U+L uppercase+lowercase letters\n  // with U uppercase letters or less. or, if there's more uppercase than lower (for eg. PASSwORD),\n  // the number of ways to lowercase U+L letters with L lowercase letters or less.\n\n\n  return getVariations(cleanedWord);\n});\n\nexport { uppercaseVariant as default };\n//# sourceMappingURL=uppercase.esm.js.map\n","import Options from '../../Options.esm.js';\n\nvar regexMatcher = (match => {\n  if (match.regexName === 'recentYear') {\n    return {\n      warning: Options.translations.warnings.recentYears,\n      suggestions: [Options.translations.suggestions.recentYears, Options.translations.suggestions.associatedYears]\n    };\n  }\n\n  return {\n    warning: '',\n    suggestions: []\n  };\n});\n\nexport { regexMatcher as default };\n//# sourceMappingURL=feedback.esm.js.map\n","import { REGEXEN } from '../../data/const.esm.js';\nimport { sorted } from '../../helper.esm.js';\n\n/*\n * -------------------------------------------------------------------------------\n *  regex matching ---------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\n\nclass MatchRegex {\n  match({\n    password,\n    regexes = REGEXEN\n  }) {\n    const matches = [];\n    Object.keys(regexes).forEach(name => {\n      const regex = regexes[name];\n      regex.lastIndex = 0; // keeps regexMatch stateless\n\n      const regexMatch = regex.exec(password);\n\n      if (regexMatch) {\n        const token = regexMatch[0];\n        matches.push({\n          pattern: 'regex',\n          token,\n          i: regexMatch.index,\n          j: regexMatch.index + regexMatch[0].length - 1,\n          regexName: name,\n          regexMatch\n        });\n      }\n    });\n    return sorted(matches);\n  }\n\n}\n\nexport { MatchRegex as default };\n//# sourceMappingURL=matching.esm.js.map\n","import { REFERENCE_YEAR, MIN_YEAR_SPACE } from '../../data/const.esm.js';\n\nvar regexMatcher = (({\n  regexName,\n  regexMatch,\n  token\n}) => {\n  const charClassBases = {\n    alphaLower: 26,\n    alphaUpper: 26,\n    alpha: 52,\n    alphanumeric: 62,\n    digits: 10,\n    symbols: 33\n  };\n\n  if (regexName in charClassBases) {\n    return charClassBases[regexName] ** token.length;\n  } // TODO add more regex types for example special dates like 09.11\n  // eslint-disable-next-line default-case\n\n\n  switch (regexName) {\n    case 'recentYear':\n      // conservative estimate of year space: num years from REFERENCE_YEAR.\n      // if year is close to REFERENCE_YEAR, estimate a year space of MIN_YEAR_SPACE.\n      return Math.max(Math.abs(parseInt(regexMatch[0], 10) - REFERENCE_YEAR), MIN_YEAR_SPACE);\n  }\n\n  return 0;\n});\n\nexport { regexMatcher as default };\n//# sourceMappingURL=scoring.esm.js.map\n","import Options from '../../Options.esm.js';\n\nvar repeatMatcher = (match => {\n  let warning = Options.translations.warnings.extendedRepeat;\n\n  if (match.baseToken.length === 1) {\n    warning = Options.translations.warnings.simpleRepeat;\n  }\n\n  return {\n    warning,\n    suggestions: [Options.translations.suggestions.repeated]\n  };\n});\n\nexport { repeatMatcher as default };\n//# sourceMappingURL=feedback.esm.js.map\n","import scoring from '../../scoring/index.esm.js';\n\n/*\n *-------------------------------------------------------------------------------\n * repeats (aaa, abcabcabc) ------------------------------\n *-------------------------------------------------------------------------------\n */\n\nclass MatchRepeat {\n  // eslint-disable-next-line max-statements\n  match({\n    password,\n    omniMatch\n  }) {\n    const matches = [];\n    let lastIndex = 0;\n\n    while (lastIndex < password.length) {\n      const greedyMatch = this.getGreedyMatch(password, lastIndex);\n      const lazyMatch = this.getLazyMatch(password, lastIndex);\n\n      if (greedyMatch == null) {\n        break;\n      }\n\n      const {\n        match,\n        baseToken\n      } = this.setMatchToken(greedyMatch, lazyMatch);\n\n      if (match) {\n        const j = match.index + match[0].length - 1;\n        const baseGuesses = this.getBaseGuesses(baseToken, omniMatch);\n        matches.push(this.normalizeMatch(baseToken, j, match, baseGuesses));\n        lastIndex = j + 1;\n      }\n    }\n\n    const hasPromises = matches.some(match => {\n      return match instanceof Promise;\n    });\n\n    if (hasPromises) {\n      return Promise.all(matches);\n    }\n\n    return matches;\n  } // eslint-disable-next-line max-params\n\n\n  normalizeMatch(baseToken, j, match, baseGuesses) {\n    const baseMatch = {\n      pattern: 'repeat',\n      i: match.index,\n      j,\n      token: match[0],\n      baseToken,\n      baseGuesses: 0,\n      repeatCount: match[0].length / baseToken.length\n    };\n\n    if (baseGuesses instanceof Promise) {\n      return baseGuesses.then(resolvedBaseGuesses => {\n        return { ...baseMatch,\n          baseGuesses: resolvedBaseGuesses\n        };\n      });\n    }\n\n    return { ...baseMatch,\n      baseGuesses\n    };\n  }\n\n  getGreedyMatch(password, lastIndex) {\n    const greedy = /(.+)\\1+/g;\n    greedy.lastIndex = lastIndex;\n    return greedy.exec(password);\n  }\n\n  getLazyMatch(password, lastIndex) {\n    const lazy = /(.+?)\\1+/g;\n    lazy.lastIndex = lastIndex;\n    return lazy.exec(password);\n  }\n\n  setMatchToken(greedyMatch, lazyMatch) {\n    const lazyAnchored = /^(.+?)\\1+$/;\n    let match;\n    let baseToken = '';\n\n    if (lazyMatch && greedyMatch[0].length > lazyMatch[0].length) {\n      // greedy beats lazy for 'aabaab'\n      // greedy: [aabaab, aab]\n      // lazy:   [aa,     a]\n      match = greedyMatch; // greedy's repeated string might itself be repeated, eg.\n      // aabaab in aabaabaabaab.\n      // run an anchored lazy match on greedy's repeated string\n      // to find the shortest repeated string\n\n      const temp = lazyAnchored.exec(match[0]);\n\n      if (temp) {\n        baseToken = temp[1];\n      }\n    } else {\n      // lazy beats greedy for 'aaaaa'\n      // greedy: [aaaa,  aa]\n      // lazy:   [aaaaa, a]\n      match = lazyMatch;\n\n      if (match) {\n        baseToken = match[1];\n      }\n    }\n\n    return {\n      match,\n      baseToken\n    };\n  }\n\n  getBaseGuesses(baseToken, omniMatch) {\n    const matches = omniMatch.match(baseToken);\n\n    if (matches instanceof Promise) {\n      return matches.then(resolvedMatches => {\n        const baseAnalysis = scoring.mostGuessableMatchSequence(baseToken, resolvedMatches);\n        return baseAnalysis.guesses;\n      });\n    }\n\n    const baseAnalysis = scoring.mostGuessableMatchSequence(baseToken, matches);\n    return baseAnalysis.guesses;\n  }\n\n}\n\nexport { MatchRepeat as default };\n//# sourceMappingURL=matching.esm.js.map\n","var repeatMatcher = (({\n  baseGuesses,\n  repeatCount\n}) => baseGuesses * repeatCount);\n\nexport { repeatMatcher as default };\n//# sourceMappingURL=scoring.esm.js.map\n","import Options from '../../Options.esm.js';\n\nvar sequenceMatcher = (() => {\n  return {\n    warning: Options.translations.warnings.sequences,\n    suggestions: [Options.translations.suggestions.sequences]\n  };\n});\n\nexport { sequenceMatcher as default };\n//# sourceMappingURL=feedback.esm.js.map\n","import { ALL_LOWER, ALL_UPPER, ALL_DIGIT } from '../../data/const.esm.js';\n\n/*\n *-------------------------------------------------------------------------------\n * sequences (abcdef) ------------------------------\n *-------------------------------------------------------------------------------\n */\n\nclass MatchSequence {\n  constructor() {\n    this.MAX_DELTA = 5;\n  } // eslint-disable-next-line max-statements\n\n\n  match({\n    password\n  }) {\n    /*\n     * Identifies sequences by looking for repeated differences in unicode codepoint.\n     * this allows skipping, such as 9753, and also matches some extended unicode sequences\n     * such as Greek and Cyrillic alphabets.\n     *\n     * for example, consider the input 'abcdb975zy'\n     *\n     * password: a   b   c   d   b    9   7   5   z   y\n     * index:    0   1   2   3   4    5   6   7   8   9\n     * delta:      1   1   1  -2  -41  -2  -2  69   1\n     *\n     * expected result:\n     * [(i, j, delta), ...] = [(0, 3, 1), (5, 7, -2), (8, 9, 1)]\n     */\n    const result = [];\n\n    if (password.length === 1) {\n      return [];\n    }\n\n    let i = 0;\n    let lastDelta = null;\n    const passwordLength = password.length;\n\n    for (let k = 1; k < passwordLength; k += 1) {\n      const delta = password.charCodeAt(k) - password.charCodeAt(k - 1);\n\n      if (lastDelta == null) {\n        lastDelta = delta;\n      }\n\n      if (delta !== lastDelta) {\n        const j = k - 1;\n        this.update({\n          i,\n          j,\n          delta: lastDelta,\n          password,\n          result\n        });\n        i = j;\n        lastDelta = delta;\n      }\n    }\n\n    this.update({\n      i,\n      j: passwordLength - 1,\n      delta: lastDelta,\n      password,\n      result\n    });\n    return result;\n  }\n\n  update({\n    i,\n    j,\n    delta,\n    password,\n    result\n  }) {\n    if (j - i > 1 || Math.abs(delta) === 1) {\n      const absoluteDelta = Math.abs(delta);\n\n      if (absoluteDelta > 0 && absoluteDelta <= this.MAX_DELTA) {\n        const token = password.slice(i, +j + 1 || 9e9);\n        const {\n          sequenceName,\n          sequenceSpace\n        } = this.getSequence(token);\n        return result.push({\n          pattern: 'sequence',\n          i,\n          j,\n          token: password.slice(i, +j + 1 || 9e9),\n          sequenceName,\n          sequenceSpace,\n          ascending: delta > 0\n        });\n      }\n    }\n\n    return null;\n  }\n\n  getSequence(token) {\n    // TODO conservatively stick with roman alphabet size.\n    //  (this could be improved)\n    let sequenceName = 'unicode';\n    let sequenceSpace = 26;\n\n    if (ALL_LOWER.test(token)) {\n      sequenceName = 'lower';\n      sequenceSpace = 26;\n    } else if (ALL_UPPER.test(token)) {\n      sequenceName = 'upper';\n      sequenceSpace = 26;\n    } else if (ALL_DIGIT.test(token)) {\n      sequenceName = 'digits';\n      sequenceSpace = 10;\n    }\n\n    return {\n      sequenceName,\n      sequenceSpace\n    };\n  }\n\n}\n\nexport { MatchSequence as default };\n//# sourceMappingURL=matching.esm.js.map\n","var sequenceMatcher = (({\n  token,\n  ascending\n}) => {\n  const firstChr = token.charAt(0);\n  let baseGuesses = 0;\n  const startingPoints = ['a', 'A', 'z', 'Z', '0', '1', '9']; // lower guesses for obvious starting points\n\n  if (startingPoints.includes(firstChr)) {\n    baseGuesses = 4;\n  } else if (firstChr.match(/\\d/)) {\n    baseGuesses = 10; // digits\n  } else {\n    // could give a higher base for uppercase,\n    // assigning 26 to both upper and lower sequences is more conservative.\n    baseGuesses = 26;\n  } // need to try a descending sequence in addition to every ascending sequence ->\n  // 2x guesses\n\n\n  if (!ascending) {\n    baseGuesses *= 2;\n  }\n\n  return baseGuesses * token.length;\n});\n\nexport { sequenceMatcher as default };\n//# sourceMappingURL=scoring.esm.js.map\n","import Options from '../../Options.esm.js';\n\nvar spatialMatcher = (match => {\n  let warning = Options.translations.warnings.keyPattern;\n\n  if (match.turns === 1) {\n    warning = Options.translations.warnings.straightRow;\n  }\n\n  return {\n    warning,\n    suggestions: [Options.translations.suggestions.longerKeyboardPattern]\n  };\n});\n\nexport { spatialMatcher as default };\n//# sourceMappingURL=feedback.esm.js.map\n","import { extend, sorted } from '../../helper.esm.js';\nimport Options from '../../Options.esm.js';\n\n/*\n * ------------------------------------------------------------------------------\n * spatial match (qwerty/dvorak/keypad and so on) -----------------------------------------\n * ------------------------------------------------------------------------------\n */\n\nclass MatchSpatial {\n  constructor() {\n    this.SHIFTED_RX = /[~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?]/;\n  }\n\n  match({\n    password\n  }) {\n    const matches = [];\n    Object.keys(Options.graphs).forEach(graphName => {\n      const graph = Options.graphs[graphName];\n      extend(matches, this.helper(password, graph, graphName));\n    });\n    return sorted(matches);\n  }\n\n  checkIfShifted(graphName, password, index) {\n    if (!graphName.includes('keypad') && // initial character is shifted\n    this.SHIFTED_RX.test(password.charAt(index))) {\n      return 1;\n    }\n\n    return 0;\n  } // eslint-disable-next-line complexity, max-statements\n\n\n  helper(password, graph, graphName) {\n    let shiftedCount;\n    const matches = [];\n    let i = 0;\n    const passwordLength = password.length;\n\n    while (i < passwordLength - 1) {\n      let j = i + 1;\n      let lastDirection = 0;\n      let turns = 0;\n      shiftedCount = this.checkIfShifted(graphName, password, i); // eslint-disable-next-line no-constant-condition\n\n      while (true) {\n        const prevChar = password.charAt(j - 1);\n        const adjacents = graph[prevChar] || [];\n        let found = false;\n        let foundDirection = -1;\n        let curDirection = -1; // consider growing pattern by one character if j hasn't gone over the edge.\n\n        if (j < passwordLength) {\n          const curChar = password.charAt(j);\n          const adjacentsLength = adjacents.length;\n\n          for (let k = 0; k < adjacentsLength; k += 1) {\n            const adjacent = adjacents[k];\n            curDirection += 1; // eslint-disable-next-line max-depth\n\n            if (adjacent) {\n              const adjacentIndex = adjacent.indexOf(curChar); // eslint-disable-next-line max-depth\n\n              if (adjacentIndex !== -1) {\n                found = true;\n                foundDirection = curDirection; // eslint-disable-next-line max-depth\n\n                if (adjacentIndex === 1) {\n                  // # index 1 in the adjacency means the key is shifted,\n                  // # 0 means unshifted: A vs a, % vs 5, etc.\n                  // # for example, 'q' is adjacent to the entry '2@'.\n                  // # @ is shifted w/ index 1, 2 is unshifted.\n                  shiftedCount += 1;\n                } // eslint-disable-next-line max-depth\n\n\n                if (lastDirection !== foundDirection) {\n                  // # adding a turn is correct even in the initial\n                  // case when last_direction is null:\n                  // # every spatial pattern starts with a turn.\n                  turns += 1;\n                  lastDirection = foundDirection;\n                }\n\n                break;\n              }\n            }\n          }\n        } // if the current pattern continued, extend j and try to grow again\n\n\n        if (found) {\n          j += 1; // otherwise push the pattern discovered so far, if any...\n        } else {\n          // don't consider length 1 or 2 chains.\n          if (j - i > 2) {\n            matches.push({\n              pattern: 'spatial',\n              i,\n              j: j - 1,\n              token: password.slice(i, j),\n              graph: graphName,\n              turns,\n              shiftedCount\n            });\n          } // ...and then start a new search for the rest of the password.\n\n\n          i = j;\n          break;\n        }\n      }\n    }\n\n    return matches;\n  }\n\n}\n\nexport { MatchSpatial as default };\n//# sourceMappingURL=matching.esm.js.map\n","import utils from '../../scoring/utils.esm.js';\nimport Options from '../../Options.esm.js';\n\nconst calcAverageDegree = graph => {\n  let average = 0;\n  Object.keys(graph).forEach(key => {\n    const neighbors = graph[key];\n    average += neighbors.filter(entry => !!entry).length;\n  });\n  average /= Object.entries(graph).length;\n  return average;\n};\n\nconst estimatePossiblePatterns = ({\n  token,\n  graph,\n  turns\n}) => {\n  const startingPosition = Object.keys(Options.graphs[graph]).length;\n  const averageDegree = calcAverageDegree(Options.graphs[graph]);\n  let guesses = 0;\n  const tokenLength = token.length; // # estimate the number of possible patterns w/ tokenLength or less with turns or less.\n\n  for (let i = 2; i <= tokenLength; i += 1) {\n    const possibleTurns = Math.min(turns, i - 1);\n\n    for (let j = 1; j <= possibleTurns; j += 1) {\n      guesses += utils.nCk(i - 1, j - 1) * startingPosition * averageDegree ** j;\n    }\n  }\n\n  return guesses;\n};\n\nvar spatialMatcher = (({\n  graph,\n  token,\n  shiftedCount,\n  turns\n}) => {\n  let guesses = estimatePossiblePatterns({\n    token,\n    graph,\n    turns\n  }); // add extra guesses for shifted keys. (% instead of 5, A instead of a.)\n  // math is similar to extra guesses of l33t substitutions in dictionary matches.\n\n  if (shiftedCount) {\n    const unShiftedCount = token.length - shiftedCount;\n\n    if (shiftedCount === 0 || unShiftedCount === 0) {\n      guesses *= 2;\n    } else {\n      let shiftedVariations = 0;\n\n      for (let i = 1; i <= Math.min(shiftedCount, unShiftedCount); i += 1) {\n        shiftedVariations += utils.nCk(shiftedCount + unShiftedCount, i);\n      }\n\n      guesses *= shiftedVariations;\n    }\n  }\n\n  return Math.round(guesses);\n});\n\nexport { spatialMatcher as default };\n//# sourceMappingURL=scoring.esm.js.map\n","import { MIN_SUBMATCH_GUESSES_SINGLE_CHAR, MIN_SUBMATCH_GUESSES_MULTI_CHAR } from '../data/const.esm.js';\nimport utils from './utils.esm.js';\nimport Options from '../Options.esm.js';\nimport bruteforceMatcher from '../matcher/bruteforce/scoring.esm.js';\nimport dateMatcher from '../matcher/date/scoring.esm.js';\nimport dictionaryMatcher from '../matcher/dictionary/scoring.esm.js';\nimport regexMatcher from '../matcher/regex/scoring.esm.js';\nimport repeatMatcher from '../matcher/repeat/scoring.esm.js';\nimport sequenceMatcher from '../matcher/sequence/scoring.esm.js';\nimport spatialMatcher from '../matcher/spatial/scoring.esm.js';\n\nconst getMinGuesses = (match, password) => {\n  let minGuesses = 1;\n\n  if (match.token.length < password.length) {\n    if (match.token.length === 1) {\n      minGuesses = MIN_SUBMATCH_GUESSES_SINGLE_CHAR;\n    } else {\n      minGuesses = MIN_SUBMATCH_GUESSES_MULTI_CHAR;\n    }\n  }\n\n  return minGuesses;\n};\n\nconst matchers = {\n  bruteforce: bruteforceMatcher,\n  date: dateMatcher,\n  dictionary: dictionaryMatcher,\n  regex: regexMatcher,\n  repeat: repeatMatcher,\n  sequence: sequenceMatcher,\n  spatial: spatialMatcher\n};\n\nconst getScoring = (name, match) => {\n  if (matchers[name]) {\n    return matchers[name](match);\n  }\n\n  if (Options.matchers[name] && 'scoring' in Options.matchers[name]) {\n    return Options.matchers[name].scoring(match);\n  }\n\n  return 0;\n}; // ------------------------------------------------------------------------------\n// guess estimation -- one function per match pattern ---------------------------\n// ------------------------------------------------------------------------------\n\n\nvar estimateGuesses = ((match, password) => {\n  const extraData = {}; // a match's guess estimate doesn't change. cache it.\n\n  if ('guesses' in match && match.guesses != null) {\n    return match;\n  }\n\n  const minGuesses = getMinGuesses(match, password);\n  const estimationResult = getScoring(match.pattern, match);\n  let guesses = 0;\n\n  if (typeof estimationResult === 'number') {\n    guesses = estimationResult;\n  } else if (match.pattern === 'dictionary') {\n    guesses = estimationResult.calculation;\n    extraData.baseGuesses = estimationResult.baseGuesses;\n    extraData.uppercaseVariations = estimationResult.uppercaseVariations;\n    extraData.l33tVariations = estimationResult.l33tVariations;\n  }\n\n  const matchGuesses = Math.max(guesses, minGuesses);\n  return { ...match,\n    ...extraData,\n    guesses: matchGuesses,\n    guessesLog10: utils.log10(matchGuesses)\n  };\n});\n\nexport { estimateGuesses as default };\n//# sourceMappingURL=estimate.esm.js.map\n","import utils from './utils.esm.js';\nimport estimateGuesses from './estimate.esm.js';\nimport { MIN_GUESSES_BEFORE_GROWING_SEQUENCE } from '../data/const.esm.js';\n\nconst scoringHelper = {\n  password: '',\n  optimal: {},\n  excludeAdditive: false,\n\n  fillArray(size, valueType) {\n    const result = [];\n\n    for (let i = 0; i < size; i += 1) {\n      let value = [];\n\n      if (valueType === 'object') {\n        value = {};\n      }\n\n      result.push(value);\n    }\n\n    return result;\n  },\n\n  // helper: make bruteforce match objects spanning i to j, inclusive.\n  makeBruteforceMatch(i, j) {\n    return {\n      pattern: 'bruteforce',\n      token: this.password.slice(i, +j + 1 || 9e9),\n      i,\n      j\n    };\n  },\n\n  // helper: considers whether a length-sequenceLength\n  // sequence ending at match m is better (fewer guesses)\n  // than previously encountered sequences, updating state if so.\n  update(match, sequenceLength) {\n    const k = match.j;\n    const estimatedMatch = estimateGuesses(match, this.password);\n    let pi = estimatedMatch.guesses;\n\n    if (sequenceLength > 1) {\n      // we're considering a length-sequenceLength sequence ending with match m:\n      // obtain the product term in the minimization function by multiplying m's guesses\n      // by the product of the length-(sequenceLength-1)\n      // sequence ending just before m, at m.i - 1.\n      pi *= this.optimal.pi[estimatedMatch.i - 1][sequenceLength - 1];\n    } // calculate the minimization func\n\n\n    let g = utils.factorial(sequenceLength) * pi;\n\n    if (!this.excludeAdditive) {\n      g += MIN_GUESSES_BEFORE_GROWING_SEQUENCE ** (sequenceLength - 1);\n    } // update state if new best.\n    // first see if any competing sequences covering this prefix,\n    // with sequenceLength or fewer matches,\n    // fare better than this sequence. if so, skip it and return.\n\n\n    let shouldSkip = false;\n    Object.keys(this.optimal.g[k]).forEach(competingPatternLength => {\n      const competingMetricMatch = this.optimal.g[k][competingPatternLength];\n\n      if (parseInt(competingPatternLength, 10) <= sequenceLength) {\n        if (competingMetricMatch <= g) {\n          shouldSkip = true;\n        }\n      }\n    });\n\n    if (!shouldSkip) {\n      // this sequence might be part of the final optimal sequence.\n      this.optimal.g[k][sequenceLength] = g;\n      this.optimal.m[k][sequenceLength] = estimatedMatch;\n      this.optimal.pi[k][sequenceLength] = pi;\n    }\n  },\n\n  // helper: evaluate bruteforce matches ending at passwordCharIndex.\n  bruteforceUpdate(passwordCharIndex) {\n    // see if a single bruteforce match spanning the passwordCharIndex-prefix is optimal.\n    let match = this.makeBruteforceMatch(0, passwordCharIndex);\n    this.update(match, 1);\n\n    for (let i = 1; i <= passwordCharIndex; i += 1) {\n      // generate passwordCharIndex bruteforce matches, spanning from (i=1, j=passwordCharIndex) up to (i=passwordCharIndex, j=passwordCharIndex).\n      // see if adding these new matches to any of the sequences in optimal[i-1]\n      // leads to new bests.\n      match = this.makeBruteforceMatch(i, passwordCharIndex);\n      const tmp = this.optimal.m[i - 1]; // eslint-disable-next-line no-loop-func\n\n      Object.keys(tmp).forEach(sequenceLength => {\n        const lastMatch = tmp[sequenceLength]; // corner: an optimal sequence will never have two adjacent bruteforce matches.\n        // it is strictly better to have a single bruteforce match spanning the same region:\n        // same contribution to the guess product with a lower length.\n        // --> safe to skip those cases.\n\n        if (lastMatch.pattern !== 'bruteforce') {\n          // try adding m to this length-sequenceLength sequence.\n          this.update(match, parseInt(sequenceLength, 10) + 1);\n        }\n      });\n    }\n  },\n\n  // helper: step backwards through optimal.m starting at the end,\n  // constructing the final optimal match sequence.\n  unwind(passwordLength) {\n    const optimalMatchSequence = [];\n    let k = passwordLength - 1; // find the final best sequence length and score\n\n    let sequenceLength = 0; // eslint-disable-next-line no-loss-of-precision\n\n    let g = 2e308;\n    const temp = this.optimal.g[k]; // safety check for empty passwords\n\n    if (temp) {\n      Object.keys(temp).forEach(candidateSequenceLength => {\n        const candidateMetricMatch = temp[candidateSequenceLength];\n\n        if (candidateMetricMatch < g) {\n          sequenceLength = parseInt(candidateSequenceLength, 10);\n          g = candidateMetricMatch;\n        }\n      });\n    }\n\n    while (k >= 0) {\n      const match = this.optimal.m[k][sequenceLength];\n      optimalMatchSequence.unshift(match);\n      k = match.i - 1;\n      sequenceLength -= 1;\n    }\n\n    return optimalMatchSequence;\n  }\n\n};\nvar scoring = {\n  // ------------------------------------------------------------------------------\n  // search --- most guessable match sequence -------------------------------------\n  // ------------------------------------------------------------------------------\n  //\n  // takes a sequence of overlapping matches, returns the non-overlapping sequence with\n  // minimum guesses. the following is a O(l_max * (n + m)) dynamic programming algorithm\n  // for a length-n password with m candidate matches. l_max is the maximum optimal\n  // sequence length spanning each prefix of the password. In practice it rarely exceeds 5 and the\n  // search terminates rapidly.\n  //\n  // the optimal \"minimum guesses\" sequence is here defined to be the sequence that\n  // minimizes the following function:\n  //\n  //    g = sequenceLength! * Product(m.guesses for m in sequence) + D^(sequenceLength - 1)\n  //\n  // where sequenceLength is the length of the sequence.\n  //\n  // the factorial term is the number of ways to order sequenceLength patterns.\n  //\n  // the D^(sequenceLength-1) term is another length penalty, roughly capturing the idea that an\n  // attacker will try lower-length sequences first before trying length-sequenceLength sequences.\n  //\n  // for example, consider a sequence that is date-repeat-dictionary.\n  //  - an attacker would need to try other date-repeat-dictionary combinations,\n  //    hence the product term.\n  //  - an attacker would need to try repeat-date-dictionary, dictionary-repeat-date,\n  //    ..., hence the factorial term.\n  //  - an attacker would also likely try length-1 (dictionary) and length-2 (dictionary-date)\n  //    sequences before length-3. assuming at minimum D guesses per pattern type,\n  //    D^(sequenceLength-1) approximates Sum(D^i for i in [1..sequenceLength-1]\n  //\n  // ------------------------------------------------------------------------------\n  mostGuessableMatchSequence(password, matches, excludeAdditive = false) {\n    scoringHelper.password = password;\n    scoringHelper.excludeAdditive = excludeAdditive;\n    const passwordLength = password.length; // partition matches into sublists according to ending index j\n\n    let matchesByCoordinateJ = scoringHelper.fillArray(passwordLength, 'array');\n    matches.forEach(match => {\n      matchesByCoordinateJ[match.j].push(match);\n    }); // small detail: for deterministic output, sort each sublist by i.\n\n    matchesByCoordinateJ = matchesByCoordinateJ.map(match => match.sort((m1, m2) => m1.i - m2.i));\n    scoringHelper.optimal = {\n      // optimal.m[k][sequenceLength] holds final match in the best length-sequenceLength\n      // match sequence covering the\n      // password prefix up to k, inclusive.\n      // if there is no length-sequenceLength sequence that scores better (fewer guesses) than\n      // a shorter match sequence spanning the same prefix,\n      // optimal.m[k][sequenceLength] is undefined.\n      m: scoringHelper.fillArray(passwordLength, 'object'),\n      // same structure as optimal.m -- holds the product term Prod(m.guesses for m in sequence).\n      // optimal.pi allows for fast (non-looping) updates to the minimization function.\n      pi: scoringHelper.fillArray(passwordLength, 'object'),\n      // same structure as optimal.m -- holds the overall metric.\n      g: scoringHelper.fillArray(passwordLength, 'object')\n    };\n\n    for (let k = 0; k < passwordLength; k += 1) {\n      matchesByCoordinateJ[k].forEach(match => {\n        if (match.i > 0) {\n          Object.keys(scoringHelper.optimal.m[match.i - 1]).forEach(sequenceLength => {\n            scoringHelper.update(match, parseInt(sequenceLength, 10) + 1);\n          });\n        } else {\n          scoringHelper.update(match, 1);\n        }\n      });\n      scoringHelper.bruteforceUpdate(k);\n    }\n\n    const optimalMatchSequence = scoringHelper.unwind(passwordLength);\n    const optimalSequenceLength = optimalMatchSequence.length;\n    const guesses = this.getGuesses(password, optimalSequenceLength);\n    return {\n      password,\n      guesses,\n      guessesLog10: utils.log10(guesses),\n      sequence: optimalMatchSequence\n    };\n  },\n\n  getGuesses(password, optimalSequenceLength) {\n    const passwordLength = password.length;\n    let guesses = 0;\n\n    if (password.length === 0) {\n      guesses = 1;\n    } else {\n      guesses = scoringHelper.optimal.g[passwordLength - 1][optimalSequenceLength];\n    }\n\n    return guesses;\n  }\n\n};\n\nexport { scoring as default };\n//# sourceMappingURL=index.esm.js.map\n","var utils = {\n  // binomial coefficients\n  // src: http://blog.plover.com/math/choose.html\n  nCk(n, k) {\n    let count = n;\n\n    if (k > count) {\n      return 0;\n    }\n\n    if (k === 0) {\n      return 1;\n    }\n\n    let coEff = 1;\n\n    for (let i = 1; i <= k; i += 1) {\n      coEff *= count;\n      coEff /= i;\n      count -= 1;\n    }\n\n    return coEff;\n  },\n\n  log10(n) {\n    return Math.log(n) / Math.log(10); // IE doesn't support Math.log10 :(\n  },\n\n  log2(n) {\n    return Math.log(n) / Math.log(2);\n  },\n\n  factorial(num) {\n    let rval = 1;\n\n    for (let i = 2; i <= num; i += 1) rval *= i;\n\n    return rval;\n  }\n\n};\n\nexport { utils as default };\n//# sourceMappingURL=utils.esm.js.map\n","/*\n * This file is part of glowingblue/password-strength.\n *\n * Copyright (c) 2021 Rafael Horvat.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nexport const slug = 'glowingblue-password-strength';\n","/*\n * This file is part of glowingblue/password-strength.\n *\n * Copyright (c) 2021 Rafael Horvat.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport Component from 'flarum/common/Component';\nimport icon from 'flarum/common/helpers/icon';\n\nexport default class EyeButton extends Component {\n\toninit(vnode) {\n\t\tsuper.oninit(vnode);\n\t}\n\n\tview() {\n\t\tconst { showing } = this.attrs;\n\t\treturn (\n\t\t\t<span className='EyeButton' onclick={() => showing(!showing())}>\n\t\t\t\t{icon(`fas fa-eye${showing() ? '-slash' : ''}`)}\n\t\t\t</span>\n\t\t);\n\t}\n}\n","/*\n * This file is part of glowingblue/password-strength.\n *\n * Copyright (c) 2021 Rafael Horvat.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport Component from 'flarum/common/Component';\nimport extractText from 'flarum/common/utils/extractText';\nimport EyeButton from './EyeButton';\n\n// Make translation calls shorter\nconst t = app.translator.trans.bind(app.translator);\n\nexport default class LogInPasswordField extends Component {\n\toninit(vnode) {\n\t\tsuper.oninit(vnode);\n\t}\n\n\tview() {\n\t\tconst { parent_this, showingPassword } = this.attrs;\n\n\t\treturn (\n\t\t\t// This markup is copied from `flarum/components/LogInModal` and then\n\t\t\t// some things have been added.\n\t\t\t// !!! Please check for updates regularly !!!\n\n\t\t\t<div className='Form-group PasswordField'>\n\t\t\t\t<input\n\t\t\t\t\tclassName='FormControl togglable'\n\t\t\t\t\tname='password'\n\t\t\t\t\ttype={showingPassword() ? 'text' : 'password'}\n\t\t\t\t\tplaceholder={extractText(t('core.forum.log_in.password_placeholder'))}\n\t\t\t\t\tbidi={parent_this.password}\n\t\t\t\t\tdisabled={parent_this.loading}\n\t\t\t\t/>\n\t\t\t\t<EyeButton showing={showingPassword} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n","/*\n * This file is part of glowingblue/password-strength.\n *\n * Copyright (c) 2021 Rafael Horvat.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport Component from 'flarum/common/Component';\nimport Stream from 'flarum/common/utils/Stream';\nimport extractText from 'flarum/common/utils/extractText';\nimport { zxcvbn } from '@zxcvbn-ts/core';\nimport EyeButton from './EyeButton';\nimport StrengthIndicator from './StrengthIndicator';\nimport { slug } from '../../common';\n\n// Make translation calls shorter\nconst t = app.translator.trans.bind(app.translator);\nconst prfx = `${slug}.forum.strengthLabels`;\n// Make settings accessible easier\nconst settings = (key) => app.forum.attribute(`${slug}.${key}`);\n\nexport default class SignUpPasswordField extends Component {\n\toninit(vnode) {\n\t\tsuper.oninit(vnode);\n\n\t\tthis.strengthLabel = new Stream('');\n\t\tthis.passwordScore = new Stream(undefined);\n\t\tthis.strengthColor = new Stream('');\n\t}\n\n\tview() {\n\t\tconst { parent_this, showingPassword, hasConfirmFiled, isConfirmFiled } = this.attrs;\n\n\t\treturn (\n\t\t\t// This markup is copied from `flarum/components/LogInModal` and then\n\t\t\t// some things have been added.\n\t\t\t// !!! Please check for updates regularly !!!\n\n\t\t\t<div className='Form-group PasswordField'>\n\t\t\t\t<input\n\t\t\t\t\tclassName={`FormControl ${settings('enablePasswordToggle') ? 'togglable' : ''}`}\n\t\t\t\t\tname={isConfirmFiled ? 'confirmPassword' : 'password'}\n\t\t\t\t\ttype={showingPassword() ? 'text' : 'password'}\n\t\t\t\t\tplaceholder={\n\t\t\t\t\t\tisConfirmFiled\n\t\t\t\t\t\t\t? t('nearata-signup-confirm-password.forum.field_placeholder')\n\t\t\t\t\t\t\t: extractText(t('core.forum.sign_up.password_placeholder'))\n\t\t\t\t\t}\n\t\t\t\t\tvalue={isConfirmFiled ? parent_this.confirmPassword() : parent_this.password()}\n\t\t\t\t\tdisabled={parent_this.loading}\n\t\t\t\t\toninput={this.inputHandler.bind(this)}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor:\n\t\t\t\t\t\t\tsettings('enableInputColor') &&\n\t\t\t\t\t\t\t!showingPassword() &&\n\t\t\t\t\t\t\t(!hasConfirmFiled || isConfirmFiled)\n\t\t\t\t\t\t\t\t? this.strengthColor()\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\tborderColor:\n\t\t\t\t\t\t\tsettings('enableInputBorderColor') &&\n\t\t\t\t\t\t\t(!hasConfirmFiled || isConfirmFiled)\n\t\t\t\t\t\t\t\t? this.strengthColor()\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t\t{settings('enablePasswordToggle') ? <EyeButton showing={showingPassword} /> : null}\n\n\t\t\t\t{!hasConfirmFiled || isConfirmFiled ? (\n\t\t\t\t\t<StrengthIndicator\n\t\t\t\t\t\tscore={this.passwordScore()}\n\t\t\t\t\t\tlabel={this.strengthLabel()}\n\t\t\t\t\t\tcolor={this.strengthColor()}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tinputHandler(e) {\n\t\tconst { parent_this, isConfirmFiled } = this.attrs;\n\n\t\tconst password = e.target.value;\n\n\t\tif (isConfirmFiled) {\n\t\t\tparent_this.confirmPassword(password);\n\t\t} else {\n\t\t\tparent_this.password(password);\n\t\t}\n\n\t\tif (password) {\n\t\t\t// Get the score of the password strength\n\t\t\tlet { score } = zxcvbn(password);\n\t\t\tthis.passwordScore(score);\n\n\t\t\t// Define strength color & label\n\t\t\tswitch (score) {\n\t\t\t\tcase 0:\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.strengthLabel(t(`${prfx}.weak`));\n\t\t\t\t\tthis.strengthColor(`rgb(${settings('weakColor')})`);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.strengthLabel(t(`${prfx}.medium`));\n\t\t\t\t\tthis.strengthColor(`rgb(${settings('mediumColor')})`);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 4:\n\t\t\t\t\tthis.strengthLabel(t(`${prfx}.strong`));\n\t\t\t\t\tthis.strengthColor(`rgb(${settings('strongColor')})`);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.passwordScore(undefined);\n\t\t\tthis.strengthLabel('');\n\t\t\tthis.strengthColor(undefined);\n\t\t}\n\t}\n}\n","/*\n * This file is part of glowingblue/password-strength.\n *\n * Copyright (c) 2021 Rafael Horvat.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport Component from 'flarum/common/Component';\n\nexport default class StrengthIndicator extends Component {\n\toninit(vnode) {\n\t\tsuper.oninit(vnode);\n\t}\n\n\tview() {\n\t\tconst { label, color } = this.attrs;\n\t\treturn (\n\t\t\t<div className={`StrengthIndicator ${label ? 'active' : ''}`}>\n\t\t\t\t<div className='StrengthIndicator-container'>\n\t\t\t\t\t<div className='StrengthIndicator-pills'>\n\t\t\t\t\t\t{['weak', 'medium', 'strong'].map((key) => (\n\t\t\t\t\t\t\t<StrengthPill color={color} active={this.isPillActive(key)} />\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='StrengthIndicator-label'>\n\t\t\t\t\t\t<span>{label}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tisPillActive(key) {\n\t\tconst { score } = this.attrs;\n\t\tswitch (key) {\n\t\t\tcase 'weak':\n\t\t\t\tif (Number.isInteger(score)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\tcase 'medium':\n\t\t\t\tif (score >= 2) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\tcase 'strong':\n\t\t\t\tif (score >= 4) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n}\n\nclass StrengthPill extends Component {\n\tview() {\n\t\tconst { color, active } = this.attrs;\n\t\tconst backgroundColor = active ? color : undefined;\n\t\treturn <div className='StrengthPill' style={{ backgroundColor }}></div>;\n\t}\n}\n","/*\n * This file is part of glowingblue/password-strength.\n *\n * Copyright (c) 2024 Glowing Blue AG.\n * Authors: Davide Iadeluca, Ian Morland, hasan-ozbey, iPurpl3x, the-turk.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport app from 'flarum/common/app';\nimport { extend } from 'flarum/common/extend';\nimport LogInModal from 'flarum/forum/components/LogInModal';\nimport SignUpModal from 'flarum/forum/components/SignUpModal';\nimport Stream from 'flarum/common/utils/Stream';\nimport { slug } from '../common';\nimport LogInPasswordField from './components/LogInPasswordField';\nimport SignUpPasswordField from './components/SignUpPasswordField';\n\napp.initializers.add(slug, () => {\n\tfunction extendOninit() {\n\t\tthis.showingPassword = new Stream(false);\n\t}\n\textend(LogInModal.prototype, 'oninit', extendOninit);\n\textend(SignUpModal.prototype, 'oninit', extendOninit);\n\n\textend(LogInModal.prototype, 'fields', function (items) {\n\t\tif (app.forum.attribute(`${slug}.enablePasswordToggle`) && items.has('password')) {\n\t\t\titems.setContent(\n\t\t\t\t'password',\n\t\t\t\t<LogInPasswordField\n\t\t\t\t\tparent_this={this}\n\t\t\t\t\tshowingPassword={this.showingPassword.bind(this)}\n\t\t\t\t/>,\n\t\t\t);\n\t\t}\n\t});\n\n\textend(SignUpModal.prototype, 'fields', function (items) {\n\t\tif (!this.attrs.token) {\n\t\t\tconst hasConfirmFiled =\n\t\t\t\titems.has('nearataConfirmPassword') && this.confirmPassword !== undefined;\n\n\t\t\titems.setContent(\n\t\t\t\t'password',\n\t\t\t\t<SignUpPasswordField\n\t\t\t\t\tparent_this={this}\n\t\t\t\t\tshowingPassword={this.showingPassword.bind(this)}\n\t\t\t\t\thasConfirmFiled={hasConfirmFiled}\n\t\t\t\t/>,\n\t\t\t);\n\n\t\t\tif (hasConfirmFiled) {\n\t\t\t\titems.setContent(\n\t\t\t\t\t'nearataConfirmPassword',\n\t\t\t\t\t<SignUpPasswordField\n\t\t\t\t\t\tparent_this={this}\n\t\t\t\t\t\tshowingPassword={this.showingPassword.bind(this)}\n\t\t\t\t\t\thasConfirmFiled={hasConfirmFiled}\n\t\t\t\t\t\tisConfirmFiled={true}\n\t\t\t\t\t/>,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t});\n});\n","module.exports = flarum.core.compat['common/Component'];","module.exports = flarum.core.compat['common/app'];","module.exports = flarum.core.compat['common/extend'];","module.exports = flarum.core.compat['common/helpers/icon'];","module.exports = flarum.core.compat['common/utils/Stream'];","module.exports = flarum.core.compat['common/utils/extractText'];","module.exports = flarum.core.compat['forum/components/LogInModal'];","module.exports = flarum.core.compat['forum/components/SignUpModal'];","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export * from './src/forum';\n"],"names":["defaultFeedback","warning","suggestions","bruteforce","date","dictionary","regex","repeat","sequence","spatial","spatialMatcher","constructor","setDefaultSuggestions","Options","getFeedback","score","extraFeedback","longestMatch","feedback","getLongestMatch","slicedSequence","match","getMatchFeedback","matches","promises","matchers","Object","key","Matcher","usedMatcher","result","password","omniMatch","response","extend","resolve","Promise","sorted","userInputs","setOptions","options","setTranslations","checkCustomTranslations","valid","type","translationType","translationKeys","translations","setRankedDictionaries","rankedDictionaries","name","getRankedDictionary","list","sanitizedInputs","input","inputType","buildRankedDictionary","extendUserInputsDictionary","addMatcher","console","SECOND","MINUTE","HOUR","DAY","MONTH","YEAR","CENTURY","times","second","minute","hour","day","month","year","century","translate","value","timeEstimation","estimateAttackTimes","crackTimesSeconds","onlineThrottling100PerHour","guesses","onlineNoThrottling10PerSecond","offlineSlowHashing1e4PerSecond","offlineFastHashing1e10PerSecond","crackTimesDisplay","scenario","seconds","guessesToScore","DELTA","displayTime","displayStr","timeKeys","foundIndex","time","base","Math","DATE_MAX_YEAR","DATE_MIN_YEAR","DATE_SPLITS","dateSplits","BRUTEFORCE_CARDINALITY","MIN_GUESSES_BEFORE_GROWING_SEQUENCE","MIN_SUBMATCH_GUESSES_SINGLE_CHAR","MIN_SUBMATCH_GUESSES_MULTI_CHAR","MIN_YEAR_SPACE","START_UPPER","END_UPPER","ALL_UPPER","ALL_UPPER_INVERTED","ALL_LOWER","ALL_LOWER_INVERTED","ONE_UPPER","ONE_LOWER","ALPHA_INVERTED","ALL_DIGIT","REFERENCE_YEAR","REGEXEN","recentYear","a","b","c","e","g","i","l","o","s","t","x","z","warnings","straightRow","keyPattern","simpleRepeat","extendedRepeat","sequences","recentYears","dates","topTen","topHundred","common","similarToCommon","wordByItself","namesByThemselves","commonNames","l33t","reverseWords","allUppercase","capitalization","associatedYears","repeated","longerKeyboardPattern","anotherWord","useWords","noNeed","ltSecond","minutes","hours","days","months","years","centuries","empty","obj","listToExtend","tempArray","string","char","chrMap","m1","m2","orderedList","counter","word","createReturnValue","timeEstimates","matchSequence","scoring","calcTime","attackTimes","zxcvbn","matching","start","resolvedMatches","token","Number","minGuesses","filteredMatches","getMatchesWithSeparator","maybeDateWithSeparator","j","regexMatch","dmy","parseInt","pattern","separator","getMatchesWithoutSeparator","maybeDateNoSeparator","metric","candidate","candidates","index","splittedDates","bestCandidate","minDistance","distance","filterNoise","isSubmatch","matchesLength","otherMatch","mapIntegersToDayMonthYear","integers","over12","over31","under1","len1","int","getDayMonth","possibleYearSplits","possibleYearSplitsLength","y","dm","k","mapIntegersToDayMonth","temp","data","twoToFourDigitYear","yearSpace","getDictionaryWarningPassword","isSoleMatch","getDictionaryWarningWikipedia","getDictionaryWarningNames","getDictionaryWarning","dictName","isAName","defaultMatch","passwordLength","passwordLower","dictionaryName","rankedDict","rank","matchedWord","reversed","baseGuesses","uppercaseVariations","uppercaseVariant","l33tVariations","l33tVariant","sub","reversedVariations","calculation","enumeratedSubs","subbedPassword","matchedDictionary","matchSub","subbedChr","chr","subDisplay","relevantL33tSubtable","passwordChars","subTable","letter","subs","table","relevantSubs","enumerateL33tSubs","tableKeys","subDict","getSubs","keys","firstKey","restKeys","nextSubs","l33tChr","dupL33tIndex","subExtension","subAlternative","newSubs","dedup","deduped","members","assoc","label","passwordReversed","getCounts","unsubbed","chrs","subbedCount","unsubbedCount","variations","subbed","p","possibilities","utils","getVariations","cleanedWord","wordArray","upperCaseCount","lowerCaseCount","variationLength","commonCases","commonCasesLength","regexes","regexName","charClassBases","alphaLower","alphaUpper","alpha","alphanumeric","digits","symbols","lastIndex","greedyMatch","lazyMatch","baseToken","hasPromises","normalizeMatch","baseMatch","repeatCount","length","resolvedBaseGuesses","getGreedyMatch","greedy","getLazyMatch","lazy","setMatchToken","lazyAnchored","getBaseGuesses","baseAnalysis","lastDelta","delta","update","absoluteDelta","sequenceSpace","sequenceName","ascending","getSequence","firstChr","startingPoints","graphName","graph","checkIfShifted","helper","lastDirection","turns","shiftedCount","prevChar","adjacents","found","foundDirection","curDirection","curChar","adjacentsLength","adjacent","adjacentIndex","calcAverageDegree","average","neighbors","entry","estimatePossiblePatterns","startingPosition","averageDegree","tokenLength","possibleTurns","unShiftedCount","shiftedVariations","getMinGuesses","getScoring","extraData","estimationResult","matchGuesses","guessesLog10","scoringHelper","optimal","excludeAdditive","fillArray","valueType","makeBruteforceMatch","estimatedMatch","estimateGuesses","pi","sequenceLength","shouldSkip","competingPatternLength","competingMetricMatch","bruteforceUpdate","tmp","lastMatch","unwind","optimalMatchSequence","candidateSequenceLength","candidateMetricMatch","mostGuessableMatchSequence","matchesByCoordinateJ","m","optimalSequenceLength","getGuesses","nCk","count","coEff","log10","log2","factorial","rval","slug","Component","icon","EyeButton","oninit","vnode","view","showing","attrs","extractText","app","translator","trans","bind","LogInPasswordField","parent_this","showingPassword","loading","Stream","StrengthIndicator","prfx","settings","forum","attribute","SignUpPasswordField","strengthLabel","passwordScore","undefined","strengthColor","hasConfirmFiled","isConfirmFiled","confirmPassword","inputHandler","color","borderColor","target","map","isPillActive","isInteger","StrengthPill","active","backgroundColor","LogInModal","SignUpModal","initializers","add","extendOninit","prototype","items","has","setContent","_extends","assign","arguments","source","hasOwnProperty","call","apply","setPrototypeOf","_inheritsLoose","subClass","superClass","create","_setPrototypeOf","__proto__"],"sourceRoot":""}